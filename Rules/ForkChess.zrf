(version "2.0")

(define common-check
   mark
   (if (on-board? $1)
        $1
        (while (and (or (position-flag? is-start) empty?) (on-board? $1)) $1)
        (if (and (not is-protected?) enemy?)
             (if (flag? is-first)
                 (set-flag is-second true)
              else
                 (set-flag is-first true)
             )
        )
   )
   back
)

(define common-capture
   mark
   (if (on-board? $1)
        $1
        (while (and (or (position-flag? is-start) empty?) (on-board? $1)) $1)
        (if (and (not is-protected?) enemy?) capture)
   )
   back
)

(define leap-check
   mark
   (if (on-board? $1)
        $1
        (if (and (not is-protected?) enemy?)
             (if (flag? is-first)
                 (set-flag is-second true)
              else
                 (set-flag is-first true)
             )
        )
   )
   back
)

(define leap-capture
   mark
   (if (on-board? $1)
        $1
        (if (and (not is-protected?) enemy?) capture)
   )
   back
)

(define pawn-check
   mark
   (if (on-board? $1)
        $1
        (if enemy?
             (if (flag? is-first)
                 (set-flag is-second true)
              else
                 (set-flag is-first true)
             )
        )
   )
   back
)

(define pawn-capture
   mark
   (if (on-board? $1)
        $1
        (if enemy? capture)
   )
   back
)

(define leap-knight
  ($1    
      (verify (or (and is-protected? enemy?) empty?))
      (set-flag is-first false)
      (set-flag is-second false)
      (leap-check nnw)
      (leap-check nne)
      (leap-check een)
      (leap-check ees)
      (leap-check ssw)
      (leap-check sse)
      (leap-check wwn)
      (leap-check wws)
      (if (and (flag? is-second) empty?)
          (leap-capture nnw)
          (leap-capture nne)
          (leap-capture een)
          (leap-capture ees)
          (leap-capture ssw)
          (leap-capture sse)
          (leap-capture wwn)
          (leap-capture wws)
      )
      add
  ) 
)

(define leap-king   
  ($1    
      (verify (or (and is-protected? enemy?) empty?))
      (set-flag is-first false)
      (set-flag is-second false)
      (leap-check n)
      (leap-check s)
      (leap-check w)
      (leap-check e)
      (leap-check nw)
      (leap-check ne)
      (leap-check sw)
      (leap-check se)
      (if (and (flag? is-second) empty?)
          (leap-capture n)
          (leap-capture s)
          (leap-capture w)
          (leap-capture e)
          (leap-capture nw)
          (leap-capture ne)
          (leap-capture sw)
          (leap-capture se)
      )
      (set-attribute never-moved? false) 
      add
  ) 
)

(define queen-slide  
  (   (set-position-flag is-start true)
      $1 
      (while empty? 
           (set-flag is-first false)
           (set-flag is-second false)
           (common-check n)
           (common-check s)
           (common-check w)
           (common-check e)
           (common-check nw)
           (common-check ne)
           (common-check sw)
           (common-check se)
           (if (flag? is-second)
               (common-capture n)
               (common-capture s)
               (common-capture w)
               (common-capture e)
               (common-capture nw)
               (common-capture ne)
               (common-capture sw)
               (common-capture se)
           )
           add 
           $1
      ) 
      (verify (and is-protected? enemy?))
      add 
  )
)

(define rook-slide 
  (   (set-position-flag is-start true)
      $1
      (while empty? 
           (set-flag is-first false)
           (set-flag is-second false)
           (common-check n)
           (common-check s)
           (common-check w)
           (common-check e)
           (if (flag? is-second)
               (common-capture n)
               (common-capture s)
               (common-capture w)
               (common-capture e)
           )
           (set-attribute never-moved? false) 
           add 
           $1
      )
      (verify (and is-protected? enemy?))
      add 
  )
)

(define bishop-slide 
  (   (set-position-flag is-start true)
      $1 
      (while empty? 
           (set-flag is-first false)
           (set-flag is-second false)
           (common-check nw)
           (common-check ne)
           (common-check sw)
           (common-check se)
           (if (flag? is-second)
               (common-capture nw)
               (common-capture ne)
               (common-capture sw)
               (common-capture se)
           )
           add 
           $1
      ) 
      (verify (and is-protected? enemy?))
      add 
  )
)

(define O-O
	 ( (verify never-moved?)
	   e ; KB1
	   (verify empty?)
	   e ; KN1
	   (verify empty?)
	   cascade
	   e ; KR1
	   (verify (and friend? (piece? Rook) never-moved?) )
	   from
	   back ; K1
		 ; Save expensive not-attacked?s for last
	   (verify not-attacked?)
	   e ; KB1
	   (verify not-attacked?)
	   to
	   (set-attribute never-moved? false)
		 ; We could check if KN1 is attacked too, but this isn't
		 ; really necessary since Zillions doesn't allow any moves
		 ; into check
	   e ; KN1
	   (set-attribute never-moved? false)
	   add
	 )
)

(define O-O-O
     ( (verify never-moved?)
       w ; Q1
       (verify empty?)
       w ; QB1
       (verify empty?)
       cascade
       w ; QN1
       (verify empty?)
       w ; QR1
       (verify (and friend? (piece? Rook) never-moved?) )
       from
       back ; K1
         ; Save expensive not-attacked?s for last
       (verify not-attacked?)
       w ; Q1
       (verify not-attacked?)
       to
       (set-attribute never-moved? false)
         ; We could check if KN1 is attacked too, but this isn't
         ; really necessary since Zillions doesn't allow any moves
         ; into check
       w ; QB1
       (set-attribute never-moved? false)
       add
     )
)

(define Pawn-add
   (if (in-zone? promotion-zone) (add Knight Bishop Rook Queen) else add)
)

(define Pawn-move
   (
      n
      (verify empty?)
      (set-flag is-first false)
      (set-flag is-second false)
      (pawn-check nw)
      (pawn-check ne)
      (if (flag? is-second)
          (pawn-capture nw)
          (pawn-capture ne)
      )
      (Pawn-add)
      (verify (in-zone? third-rank))
      n
      (verify empty?)
      (set-flag is-first false)
      (set-flag is-second false)
      (pawn-check nw)
      (pawn-check ne)
      (if (flag? is-second)
          (pawn-capture nw)
          (pawn-capture ne)
      )
      add
   )
)

(define Board-Definitions
  (image "images\Chess\SHaag\Chess8x8.bmp")
  (grid
     (start-rectangle 5 5 53 53)
     (dimensions
         ("a/b/c/d/e/f/g/h" (49 0)) ; files
         ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
     )
     (directions (n 0 -1) (e 1 0) (s 0 1) (w -1 0)
                 (ne 1 -1) (nw -1 -1) (se 1 1) (sw -1 1)
                 (nnw -1 -2) (nne 1 -2) (een 2 -1) (ees 2 1)
                 (ssw -1 2) (sse 1 2) (wwn -2 -1) (wws -2 1)
     )
  )
  (symmetry Black (n s) (s n) (nw sw) (sw nw) (ne se) (se ne)
                  (nnw ssw)(ssw nnw)(nne sse)(sse nne)
                  (een ees)(ees een)(wwn wws)(wws wwn)
  )
  (zone
     (name promotion-zone)
     (players White)
     (positions a8 b8 c8 d8 e8 f8 g8 h8)
  )
  (zone
     (name promotion-zone)
     (players Black)
     (positions a1 b1 c1 d1 e1 f1 g1 h1)
  )
  (zone
     (name third-rank)
     (players White)
     (positions a3 b3 c3 d3 e3 f3 g3 h3)
  )
  (zone
     (name third-rank)
     (players Black)
     (positions a6 b6 c6 d6 e6 f6 g6 h6)
  )
)

(game
   (title "Fork Chess")
   (description " ")
   (history " ")

   (option "prevent flipping" 2)

   (win-sound "Audio\Orchestra_CF.wav")
   (loss-sound "Audio\Orchestra_FC.wav")
   (click-sound "Audio\Pickup.wav")
   (release-sound "Audio\WoodThunk.wav")

   (players White Black)
   (turn-order White Black)
   (board (Board-Definitions))

   (board-setup
      (White
         (Pawn a2 b2 c2 d2 e2 f2 g2 h2)
         (Knight b1 g1)
         (Bishop c1 f1)
         (Rook a1 h1)
         (Queen d1)
         (King e1)
      )
      (Black
         (Pawn a7 b7 c7 d7 e7 f7 g7 h7)
         (Knight b8 g8)
         (Bishop c8 f8)
         (Rook a8 h8)
         (Queen d8)
         (King e8)
      )
   )

   (piece
      (name Pawn)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute is-protected? true)
      (moves
         (Pawn-move)
      )
   )

   (piece
      (name Knight)
	  (help "Knight: moves like an `L`, 2 squares one way and one the other")
      (image White "images\Chess\SHaag\wknight.bmp"
             Black "images\Chess\SHaag\bknight.bmp")
      (moves
	     (leap-knight nnw)
	     (leap-knight nne)
	     (leap-knight een)
	     (leap-knight ees)
	     (leap-knight ssw)
	     (leap-knight sse)
	     (leap-knight wwn)
	     (leap-knight wws)
      )
   )

   (piece
      (name Bishop)
	  (help "Bishop: slides diagonally any number of squares")
      (image White "images\Chess\SHaag\wbishop.bmp"
             Black "images\Chess\SHaag\bbishop.bmp")
      (moves
         (bishop-slide ne)
         (bishop-slide nw)
         (bishop-slide se)
         (bishop-slide sw)
      )
   )

   (piece
      (name Rook)
	  (help "Rook: slides any number of squares along the row or column.")
      (image White "images\Chess\SHaag\wrook.bmp"
             Black "images\Chess\SHaag\brook.bmp")
      (attribute never-moved? true)
      (moves
         (rook-slide n)
         (rook-slide e)
         (rook-slide s)
         (rook-slide w)
      )
   )

   (piece
      (name Queen)
	  (help "Queen: can slide any number of squares in any direction")
      (image White "images\Chess\SHaag\wqueen.bmp"
             Black "images\Chess\SHaag\bqueen.bmp")
      (moves
         (queen-slide n)
         (queen-slide e)
         (queen-slide s)
         (queen-slide w)
         (queen-slide ne)
         (queen-slide nw)
         (queen-slide se)
         (queen-slide sw)
      )
   )

   (piece
      (name King)
	  (help "King: steps 1 square in any direction to a safe square")
      (image White "images\Chess\SHaag\wking.bmp"
             Black "images\Chess\SHaag\bking.bmp")
      (attribute never-moved? true)
      (moves
         (leap-king n)
         (leap-king e)
         (leap-king s)
         (leap-king w)
         (leap-king ne)
         (leap-king nw)
         (leap-king se)
         (leap-king sw)
         (O-O)
         (O-O-O)
      )
   )

   (loss-condition (White Black) (pieces-remaining 0 King) )
)

(variant
   (title "Crazy Chess")
   (description " ")
   (history " ")

   (piece
      (name Pawn)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute is-protected? false)
      (moves
         (Pawn-move)
      )
   )
)
