(version "2.0")

(define check-attacked-man
  (if (and (on-board? $1) (on-board? $2) (enemy? $1) (empty? $2))
      (set-flag is-attacked? true)
  )
)

(define check-attacked-king
  (if (and (on-board? $2) (on-board? $1) (empty? $2))
      $1
      (while (and (on-board? $1) empty?) $1)
      (if (and enemy? (piece? King))
          (set-flag is-attacked? true)
      )
      $2
      (while empty? $2)
  )
)

(define check-attacked
  (set-flag is-attacked? false)
  mark a0
  (while (on-board? next)
     (if friend?
         (check-attacked-man  n s)
         (check-attacked-man  w e)
         (check-attacked-man  e w)
         (check-attacked-king n s)
         (check-attacked-king w e)
         (check-attacked-king e w)
         (check-attacked-king s n)
     )
     next
  )
  back
)

(define man-attacking-dir
  (verify (or (not-enemy? $1) (not-empty? $2)))
)

(define man-attacking
  (if (flag? is-attacked?)
      (man-attacking-dir n nn)
      (man-attacking-dir w ww)
      (man-attacking-dir e ee)
  )
)

(define king-attacking
  (if (flag? is-attacked?)
      mark $1
      (while (and (on-board? $1) empty?) $1)
      (if (and enemy? (on-board? $1))
          (verify (not-empty? $1))
      )
      back
  )
)

(define checker-jump (
  $1
  (verify enemy?)
  capture
  $1
  (verify empty?)
  (if (in-zone? promotion)
      (if (or (and (enemy? e) (empty? ee))
              (and (enemy? w) (empty? ww)))
          (add-partial jumptype)
       else
          (add-partial King notype)
      )
   else
      (add-partial jumptype)
  )
))

(define checker-shift (
  (check-attacked)
  $1
  (verify empty?)
  (man-attacking)
  (if (in-zone? promotion)
      (add King)
   else
      add
  )
))

(define king-jump (
  (while (empty? $1)
      $1
  )
  (verify (enemy? $1))
  $1
  (verify (empty? $1))
  $1
  (while empty?
      mark
      (while empty? 
        (opposite $1)
      ) 
      capture
      back
      (add-partial continuetype)
      $1
  )
))

(define king-continue (
  (while (empty? $1)
      $1
      (verify not-last-from?)
  )
  (verify (enemy? $1))
  $1
  (verify (empty? $1))
  $1
  (while empty?
      mark
      (while empty? 
        (opposite $1)
      ) 
      capture
      back
      (add-partial continuetype)
      $1
  )
))

(define king-shift-1 (
  (check-attacked)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-2 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-3 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-4 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-5 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-6 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-7 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(game
  (title "Bahrain Dama")
  (description "")
  (history  "Traditional game.")

  (move-sound "Audio/Pickup.wav")
  (release-sound "Audio/Pickup.wav")
  (capture-sound "")

  (option "maximal captures" true)
  (option "prevent flipping" 2)
  (option "animate captures" false)

  (players    White Black)
  (turn-order White Black)
  (move-priorities jumptype normaltype)

  (board
    (image "../images/sultan/chess8x8.bmp" "../images/wiedem/chess8x8.bmp")
    (grid
      (start-rectangle 5 5 54 54)
      (dimensions
        ("a/b/c/d/e/f/g/h" (49 0)) ; files
        ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
      )
      (directions (n 0 -1) (s 0 1) (e 1 0) (w -1 0)
                  (ee 2 0) (ww -2 0) (nn 0 -2) (ss 0 2)
                  (next 0 -1)
      ) 
    )
    (dummy a0)
    (links next (a0 a1) (a8 b1) (b8 c1) (c8 d1) (d8 e1) (e8 f1) (f8 g1) (g8 h1))
    (symmetry Black (n s) (s n) (nn ss) (ss nn))
    (zone (name promotion) (players White)
          (positions a8 b8 c8 d8 e8 f8 g8 h8)
    )
    (zone (name promotion) (players Black)
          (positions a1 b1 c1 d1 e1 f1 g1 h1)
    )
  )

  (piece
     (name Checker)
     (image White "../images/wiedem/CheckerWhite.bmp"
            Black "../images/wiedem/CheckerBlack.bmp")
     (attribute captured? false)
     (moves
        (move-type jumptype)
           (checker-jump n)
           (checker-jump e)
           (checker-jump w)

        (move-type normaltype)
           (checker-shift n)
           (checker-shift e)
           (checker-shift w)

        (move-type notype)
     )
  )

  (piece
     (name King)
     (image White "../images/wiedem/CheckerKingWhite.bmp"
            Black "../images/wiedem/CheckerKingBlack.bmp")
     (attribute captured? false)
     (moves
        (move-type jumptype)
           (king-jump n)
           (king-jump e)
           (king-jump w)
           (king-jump s)

        (move-type continuetype)
           (king-continue n)
           (king-continue e)
           (king-continue w)
           (king-continue s)

        (move-type normaltype)
           (king-shift-1 n e w s) (king-shift-1 e w s n) (king-shift-1 w s n e) (king-shift-1 s n e w)
           (king-shift-2 n e w s) (king-shift-2 e w s n) (king-shift-2 w s n e) (king-shift-2 s n e w)
           (king-shift-3 n e w s) (king-shift-3 e w s n) (king-shift-3 w s n e) (king-shift-3 s n e w)
           (king-shift-4 n e w s) (king-shift-4 e w s n) (king-shift-4 w s n e) (king-shift-4 s n e w)
           (king-shift-5 n e w s) (king-shift-5 e w s n) (king-shift-5 w s n e) (king-shift-5 s n e w)
           (king-shift-6 n e w s) (king-shift-6 e w s n) (king-shift-6 w s n e) (king-shift-6 s n e w)
           (king-shift-7 n e w s) (king-shift-7 e w s n) (king-shift-7 w s n e) (king-shift-7 s n e w)

        (move-type notype)
     )
  )

  (board-setup
    (White (Checker a2 b2 c2 d2 e2 f2 g2 h2  a3 b3 c3 d3 e3 f3 g3 h3) )
    (Black (Checker a7 b7 c7 d7 e7 f7 g7 h7  a6 b6 c6 d6 e6 f6 g6 h6) )
  )

  (loss-condition (White Black) (pieces-remaining 0) )
  (loss-condition (White Black) stalemated )
  (loss-condition (White Black) repetition )
)
