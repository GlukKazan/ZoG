(define kish-king
  (if (and (on-board? $2)
           (empty? $2)
      )
      mark
      (while (and (on-board? $1) (empty? $1)) $1)
      (if (and (on-board? $1)
               (enemy? $1)
               (piece? King $1)
          )
          (set-flag kish true)
      )
      back
  )
)

(define kish-checker
  (if (and (on-board? $1)
           (on-board? $2)
           (enemy? $1)
           (empty? $2)
      )
      (set-flag kish true)
  )
)

(define check-kish
  (set-flag kish false)
  (kish-checker n s)
  (kish-checker w e)
  (kish-checker e w)
  (kish-king n s)
  (kish-king s n)
  (kish-king w e)
  (kish-king e w)
  (verify (flag? kish))
)

(define checker-kish (
  (check-kish)
  $1 (verify empty?)
  (if (in-zone? promotion)
      (add King)
   else
      add
  )
))

(define king-kish (
  (check-kish)
  $1
  (while empty? add $1)
))

(define check-attacked-man
  (if (and (on-board? $1) (on-board? $2) (enemy? $1) (empty? $2))
      (set-flag is-attacked? true)
  )
)

(define check-attacked-king
  (if (and (on-board? $2) (on-board? $1) (empty? $2))
      $1
      (while (and (on-board? $1) empty?) $1)
      (if (and enemy? (piece? King))
          (set-flag is-attacked? true)
      )
      $2
      (while empty? $2)
  )
)

(define check-attacked
  (set-position-flag is-from true)
  (set-flag is-attacked? false)
  mark a0
  (while (on-board? next)
     (if (and friend? (not-position-flag? is-from))
         (check-attacked-man  n s)
         (check-attacked-man  w e)
         (check-attacked-man  e w)
         (check-attacked-king n s)
         (check-attacked-king w e)
         (check-attacked-king e w)
         (check-attacked-king s n)
     )
     next
  )
  back
)

(define man-attacking-dir
  (verify (or (not-enemy? $1) (not-empty? $2)))
)

(define man-attacking
  (if (flag? is-attacked?)
      (man-attacking-dir n nn)
      (man-attacking-dir w ww)
      (man-attacking-dir e ee)
  )
)

(define king-attacking
  (if (flag? is-attacked?)
      mark $1
      (while (and (on-board? $1) empty?) $1)
      (if (and enemy? (on-board? $1))
          (verify (not-empty? $1))
      )
      back
  )
)

(define checker-jump (
  $1
  (verify enemy?)
  capture
  $1
  (verify empty?)
  (if (in-zone? promotion)
      (if (or (and (enemy? e) (empty? ee))
              (and (enemy? w) (empty? ww)))
          (add-partial continuetype)
       else
          (add-partial King notype)
      )
   else
      (add-partial continuetype)
  )
))

(define checker-shift (
  (check-attacked)
  $1
  (verify empty?)
  (man-attacking)
  (if (in-zone? promotion)
      (add King)
   else
      add
  )
))

(define king-jump (
  (while (empty? $1)
      $1
  )
  (verify (enemy? $1))
  $1
  (verify (empty? $1))
  $1
  (while empty?
      mark
      (while empty? 
        (opposite $1)
      ) 
      capture
      back
      (add-partial continuetype)
      $1
  )
))

(define king-continue (
  (while (empty? $1)
      $1
      (verify not-last-from?)
  )
  (verify (enemy? $1))
  $1
  (verify (empty? $1))
  $1
  (while empty?
      mark
      (while empty? 
        (opposite $1)
      ) 
      capture
      back
      (add-partial continuetype)
      $1
  )
))

(define king-shift-1 (
  (check-attacked)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-2 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-3 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-4 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-5 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-6 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(define king-shift-7 (
  (check-attacked)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  $1 (verify empty?)
  (king-attacking $2) 
  (king-attacking $3) 
  (king-attacking $4) 
  add
))

(game
  (title "Bahrain Dama")
  (description "The object of Bahrain Dama is to capture all your opponent's checkers.\\
                Capture is by jumping over and is obligatory in this game.\
                You are required to make a maximal number of captures on each turn.\\
                Each player begins with sixteen Checkers,\
                When no capture is available, Checkers move one open space directly forward\
                or one open space to either side.\
                Checkers capture adjacent enemy forward or sideways\
                when the adjacent space on the opposite side of the enemy is open,\
                jumping over the enemy and landing on that open space.\
                If, upon so landing, the Checker finds himself adjacent to another enemy,\
                either ahead or sideways,\
                with the adjacent space on that enemy's opposite side also open,\
                the Checker must continue capturing.\\
                When a Checker reaches the far edge of the board (initially empty),\
                the Checker is promoted to a King.\
                If this arrival is by a jump in a capture sequence,\
                the capture sequence must end with the promotion.\
                If there is a way to capture more enemy\
                before reaching or without reaching the far edge,\
                the Checker must maximize his capture,\
                possibly forgoing his promotion.\\
                When no capture is available, Kings move like Chess Rooks\
                (or like XiangQi Ju or like XiangQi Pao),\
                in any orthogonal direction, through any number of open spaces.\
                Kings also capture by jumping over one enemy at a time,\
                but this enemy may lie any number of open spaces away\
                in any orthogonal direction,\
                so long as the adjacent space on the far side of the enemy be open.\
                When making each capture, a King may land any number of open spaces\
                away from the open space on the far side of the captured enemy,\
                and from there, the King must continue capturing, if possible.\
                The King is required to make a maximal number of captures\
                unless more captures can be made using a different piece.\\
                A very confusing rule for this game is that when any of your pieces is threatened,\
                you may not make any move which would threaten any enemy piece."
  )
  (history     "Traditional game played in Bahrain.")
  (strategy    "Watch out for forced capture combinations.\
                Try to use these forced capture combinations to your advantage.\
                You need three men in a line so you can trigger a forced combination.\\
                A King in a corner is invulnerable to capture where he sits,\
                but can easily be drawn out by a forced capture combination.\
                Two adjacent pieces on an edge are invulnerable to capture.\
                Four adjacent pieces in a square are invulnerable anywhere on the board.\
                These solid invulnerable formations help defend against combination jumps."
  ) 
  (move-sound "Audio/Pickup.wav")
  (release-sound "Audio/Pickup.wav")
  (capture-sound "")

  (maximal-captures  true)
  (allow-flipping    true)
  (animate-captures false)

  (players    White Black)
  (turn-order White Black)
  (move-priorities jumptype normaltype)

  (board
    (image "../images/sultan/chess8x8.bmp" "../images/wiedem/chess8x8.bmp")
    (grid
      (start-rectangle 5 5 54 54)
      (dimensions
        ("a/b/c/d/e/f/g/h" (49 0)) ; files
        ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
      )
      (directions (n 0 -1) (s 0 1) (e 1 0) (w -1 0)
                  (ee 2 0) (ww -2 0) (nn 0 -2) (ss 0 2)
                  (next 0 -1)
      ) 
    )
    (dummy a0)
    (links next (a0 a1) (a8 b1) (b8 c1) (c8 d1) (d8 e1) (e8 f1) (f8 g1) (g8 h1))
    (symmetry Black (n s) (s n) (nn ss) (ss nn))
    (zone (name promotion) (players White)
          (positions a8 b8 c8 d8 e8 f8 g8 h8)
    )
    (zone (name promotion) (players Black)
          (positions a1 b1 c1 d1 e1 f1 g1 h1)
    )
  )

  (piece
     (name Checker)
     (help        "Move one space forward or sideways.  Capture jumping over adjacent enemy to empty adjacent space.")
     (description "When no capture is available,\
                   Checker moves one open space directly forward\
                   or one open space to either side.\\
                   Checker captures adjacent enemy forward or sideways\
                   when the adjacent space on the opposite side of the enemy is open,\
                   jumping over the enemy and landing on that open space.\
                   If, upon so landing,\
                   the Checker finds himself adjacent to another enemy,\
                   either ahead or sideways,\
                   with the adjacent space on that enemy's opposite side also open,\
                   the Checker must continue capturing.\
                   The Checker must maximize the number of captures.\\
                   When a Checker reaches the far edge of the board,\
                   the Checker is promoted to a King.\
                   If this arrival is by a jump in a capture sequence,\
                   the capture sequence must end with the promotion.\
                   If there is a way to capture more enemy\
                   before reaching or without reaching the far edge,\
                   the Checker must maximize his capture,\
                   possibly forgoing his promotion."
     )
     (image White "../images/wiedem/CheckerWhite.bmp"
            Black "../images/wiedem/CheckerBlack.bmp")
     (attribute captured? false)
     (moves
        (move-type jumptype)
           (checker-kish n)
           (checker-kish e)
           (checker-kish w)
           (checker-jump n)
           (checker-jump e)
           (checker-jump w)

        (move-type continuetype)
           (checker-jump n)
           (checker-jump e)
           (checker-jump w)

        (move-type normaltype)
           (checker-shift n)
           (checker-shift e)
           (checker-shift w)

        (move-type notype)
     )
  )

  (piece
     (name King)
     (help        "Move orthogonally any number of open spaces.  Capture jumping over one enemy at any distance.")
     (description "When no capture is available, Kings move like Chess Rooks\
                   (or like XiangQi Ju or like XiangQi Pao),\
                   in any orthogonal direction, through any number of open spaces.\\
                   Kings capture by jumping over one enemy at a time,\
                   in a sequence of leaps that maximizes the number of captures.\
                   Each enemy may lie any number of open spaces away\
                   in any orthogonal direction,\
                   so long as the adjacent space on the far side of the enemy be open.\
                   When making each capture,\
                   a King may land any number of open spaces\
                   away from the open space on the far side of the captured enemy,\
                   and from there, the King must continue capturing, if possible.\
                   The King is required to make a maximal number of captures\
                   unless more captures can be made using a different piece."
     )
     (image White "../images/wiedem/CheckerKingWhite.bmp"
            Black "../images/wiedem/CheckerKingBlack.bmp")
     (attribute captured? false)
     (moves
        (move-type jumptype)
           (king-kish n)
           (king-kish s)
           (king-kish e)
           (king-kish w)
           (king-jump n)
           (king-jump e)
           (king-jump w)
           (king-jump s)

        (move-type continuetype)
           (king-continue n)
           (king-continue e)
           (king-continue w)
           (king-continue s)

        (move-type normaltype)
           (king-shift-1 n e w s) (king-shift-1 e w s n) (king-shift-1 w s n e) (king-shift-1 s n e w)
           (king-shift-2 n e w s) (king-shift-2 e w s n) (king-shift-2 w s n e) (king-shift-2 s n e w)
           (king-shift-3 n e w s) (king-shift-3 e w s n) (king-shift-3 w s n e) (king-shift-3 s n e w)
           (king-shift-4 n e w s) (king-shift-4 e w s n) (king-shift-4 w s n e) (king-shift-4 s n e w)
           (king-shift-5 n e w s) (king-shift-5 e w s n) (king-shift-5 w s n e) (king-shift-5 s n e w)
           (king-shift-6 n e w s) (king-shift-6 e w s n) (king-shift-6 w s n e) (king-shift-6 s n e w)
           (king-shift-7 n e w s) (king-shift-7 e w s n) (king-shift-7 w s n e) (king-shift-7 s n e w)

        (move-type notype)
     )
  )

  (board-setup
    (White (Checker a2 b2 c2 d2 e2 f2 g2 h2  a3 b3 c3 d3 e3 f3 g3 h3) )
    (Black (Checker a7 b7 c7 d7 e7 f7 g7 h7  a6 b6 c6 d6 e6 f6 g6 h6) )
  )

  (loss-condition (White Black) (pieces-remaining 0) )
  (loss-condition (White Black) stalemated )
  (loss-condition (White Black) repetition )
)
