(define f
  (if (piece? $2) (set-flag $1 true))
)

(define init-level
  (set-flag j-1 false) (set-flag j-2 false) (set-flag j-4 false)
  (f j-1 I01) (f j-1 I11) (f j-1 I21) (f j-1 I31) (f j-1 I41) (f j-1 I51) (f j-1 I61) (f j-1 I71) (f j-1 I81) (f j-1 I91) (f j-1 IA1) (f j-1 IB1)
  (f j-1 I03) (f j-1 I13) (f j-1 I23) (f j-1 I33) (f j-1 I43) (f j-1 I53) (f j-1 I63) (f j-1 I73) (f j-1 I83) (f j-1 I93) (f j-1 IA3) (f j-1 IB3)
  (f j-1 I05) (f j-1 I15) (f j-1 I25) (f j-1 I35) (f j-1 I45) (f j-1 I55) (f j-1 I65) (f j-1 I75) (f j-1 I85) (f j-1 I95) (f j-1 IA5) (f j-1 IB5)
  (f j-2 I02) (f j-2 I12) (f j-2 I22) (f j-2 I32) (f j-2 I42) (f j-2 I52) (f j-2 I62) (f j-2 I72) (f j-2 I82) (f j-2 I92) (f j-2 IA2) (f j-2 IB2)
  (f j-2 I03) (f j-2 I13) (f j-2 I23) (f j-2 I33) (f j-2 I43) (f j-2 I53) (f j-2 I63) (f j-2 I73) (f j-2 I83) (f j-2 I93) (f j-2 IA3) (f j-2 IB3)
  (f j-4 I04) (f j-4 I14) (f j-4 I24) (f j-4 I34) (f j-4 I44) (f j-4 I54) (f j-4 I64) (f j-4 I74) (f j-4 I84) (f j-4 I94) (f j-4 IA4) (f j-4 IB4)
  (f j-4 I05) (f j-4 I15) (f j-4 I25) (f j-4 I35) (f j-4 I45) (f j-4 I55) (f j-4 I65) (f j-4 I75) (f j-4 I85) (f j-4 I95) (f j-4 IA5) (f j-4 IB5)
)

(define init-line
  (set-flag i-1 false) (set-flag i-2 false) (set-flag i-4 false) (set-flag i-8 false)
  (f i-1 I10) (f i-1 I11) (f i-1 I12) (f i-1 I13) (f i-1 I14) (f i-1 I15)
  (f i-1 I30) (f i-1 I31) (f i-1 I32) (f i-1 I33) (f i-1 I34) (f i-1 I35)
  (f i-1 I50) (f i-1 I51) (f i-1 I52) (f i-1 I53) (f i-1 I54) (f i-1 I55)
  (f i-1 I70) (f i-1 I71) (f i-1 I72) (f i-1 I73) (f i-1 I74) (f i-1 I75)
  (f i-1 I90) (f i-1 I91) (f i-1 I92) (f i-1 I93) (f i-1 I94) (f i-1 I95)
  (f i-1 IB0) (f i-1 IB1) (f i-1 IB2) (f i-1 IB3) (f i-1 IB4) (f i-1 IB5)
  (f i-2 I20) (f i-2 I21) (f i-2 I22) (f i-2 I23) (f i-2 I24) (f i-2 I25)
  (f i-2 I30) (f i-2 I31) (f i-2 I32) (f i-2 I33) (f i-2 I34) (f i-2 I35)
  (f i-2 I60) (f i-2 I61) (f i-2 I62) (f i-2 I63) (f i-2 I64) (f i-2 I65)
  (f i-2 I70) (f i-2 I71) (f i-2 I72) (f i-2 I73) (f i-2 I74) (f i-2 I75)
  (f i-2 IA0) (f i-2 IA1) (f i-2 IA2) (f i-2 IA3) (f i-2 IA4) (f i-2 IA5)
  (f i-2 IB0) (f i-2 IB1) (f i-2 IB2) (f i-2 IB3) (f i-2 IB4) (f i-2 IB5)
  (f i-4 I40) (f i-4 I41) (f i-4 I42) (f i-4 I43) (f i-4 I44) (f i-4 I45)
  (f i-4 I50) (f i-4 I51) (f i-4 I52) (f i-4 I53) (f i-4 I54) (f i-4 I55)
  (f i-4 I60) (f i-4 I61) (f i-4 I62) (f i-4 I63) (f i-4 I64) (f i-4 I65)
  (f i-4 I70) (f i-4 I71) (f i-4 I72) (f i-4 I73) (f i-4 I74) (f i-4 I75)
  (f i-8 I80) (f i-8 I81) (f i-8 I82) (f i-8 I83) (f i-8 I84) (f i-8 I85)
  (f i-8 I90) (f i-8 I91) (f i-8 I92) (f i-8 I93) (f i-8 I94) (f i-8 I95)
  (f i-8 IA0) (f i-8 IA1) (f i-8 IA2) (f i-8 IA3) (f i-8 IA4) (f i-8 IA5)
  (f i-8 IB0) (f i-8 IB1) (f i-8 IB2) (f i-8 IB3) (f i-8 IB4) (f i-8 IB5)
)

(define check-level-up
  (set-flag is-checked? false)
  (if (and (not-flag? j-4) (not-flag? j-2) (not-flag? j-1))
      (if (or (piece? I00 up) (piece? I10 up) (piece? I20 up) (piece? I30 up) (piece? I40 up) (piece? I50 up) (piece? I60 up) (piece? I70 up) (piece? I80 up) (piece? I90 up) (piece? IA0 up) (piece? IB0 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I01 up) (piece? I11 up) (piece? I21 up) (piece? I31 up) (piece? I41 up) (piece? I51 up) (piece? I61 up) (piece? I71 up) (piece? I81 up) (piece? I91 up) (piece? IA1 up) (piece? IB1 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I02 up) (piece? I12 up) (piece? I22 up) (piece? I32 up) (piece? I42 up) (piece? I52 up) (piece? I62 up) (piece? I72 up) (piece? I82 up) (piece? I92 up) (piece? IA2 up) (piece? IB2 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I03 up) (piece? I13 up) (piece? I23 up) (piece? I33 up) (piece? I43 up) (piece? I53 up) (piece? I63 up) (piece? I73 up) (piece? I83 up) (piece? I93 up) (piece? IA3 up) (piece? IB3 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I04 up) (piece? I14 up) (piece? I24 up) (piece? I34 up) (piece? I44 up) (piece? I54 up) (piece? I64 up) (piece? I74 up) (piece? I84 up) (piece? I94 up) (piece? IA4 up) (piece? IB4 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? j-4) (not-flag? j-2) (flag? j-1))
      (if (or (piece? I01 up) (piece? I11 up) (piece? I21 up) (piece? I31 up) (piece? I41 up) (piece? I51 up) (piece? I61 up) (piece? I71 up) (piece? I81 up) (piece? I91 up) (piece? IA1 up) (piece? IB1 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I02 up) (piece? I12 up) (piece? I22 up) (piece? I32 up) (piece? I42 up) (piece? I52 up) (piece? I62 up) (piece? I72 up) (piece? I82 up) (piece? I92 up) (piece? IA2 up) (piece? IB2 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I03 up) (piece? I13 up) (piece? I23 up) (piece? I33 up) (piece? I43 up) (piece? I53 up) (piece? I63 up) (piece? I73 up) (piece? I83 up) (piece? I93 up) (piece? IA3 up) (piece? IB3 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I04 up) (piece? I14 up) (piece? I24 up) (piece? I34 up) (piece? I44 up) (piece? I54 up) (piece? I64 up) (piece? I74 up) (piece? I84 up) (piece? I94 up) (piece? IA4 up) (piece? IB4 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? j-4) (flag? j-2) (not-flag? j-1))
      (if (or (piece? I02 up) (piece? I12 up) (piece? I22 up) (piece? I32 up) (piece? I42 up) (piece? I52 up) (piece? I62 up) (piece? I72 up) (piece? I82 up) (piece? I92 up) (piece? IA2 up) (piece? IB2 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I03 up) (piece? I13 up) (piece? I23 up) (piece? I33 up) (piece? I43 up) (piece? I53 up) (piece? I63 up) (piece? I73 up) (piece? I83 up) (piece? I93 up) (piece? IA3 up) (piece? IB3 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I04 up) (piece? I14 up) (piece? I24 up) (piece? I34 up) (piece? I44 up) (piece? I54 up) (piece? I64 up) (piece? I74 up) (piece? I84 up) (piece? I94 up) (piece? IA4 up) (piece? IB4 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? j-4) (flag? j-2) (flag? j-1))
      (if (or (piece? I03 up) (piece? I13 up) (piece? I23 up) (piece? I33 up) (piece? I43 up) (piece? I53 up) (piece? I63 up) (piece? I73 up) (piece? I83 up) (piece? I93 up) (piece? IA3 up) (piece? IB3 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I04 up) (piece? I14 up) (piece? I24 up) (piece? I34 up) (piece? I44 up) (piece? I54 up) (piece? I64 up) (piece? I74 up) (piece? I84 up) (piece? I94 up) (piece? IA4 up) (piece? IB4 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? j-4) (not-flag? j-2) (not-flag? j-1))
      (if (or (piece? I04 up) (piece? I14 up) (piece? I24 up) (piece? I34 up) (piece? I44 up) (piece? I54 up) (piece? I64 up) (piece? I74 up) (piece? I84 up) (piece? I94 up) (piece? IA4 up) (piece? IB4 up))
          (set-flag is-checked? true)
      )
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? j-4) (not-flag? j-2) (flag? j-1))
      (if (or (piece? I05 up) (piece? I15 up) (piece? I25 up) (piece? I35 up) (piece? I45 up) (piece? I55 up) (piece? I65 up) (piece? I75 up) (piece? I85 up) (piece? I95 up) (piece? IA5 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
)

(define check-line
  (set-flag is-checked? false)
  (if (and (not-flag? i-8) (not-flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I00) (piece? I01) (piece? I02) (piece? I03) (piece? I04) (piece? I05))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I10) (piece? I11) (piece? I12) (piece? I13) (piece? I14) (piece? I15))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? I20) (piece? I21) (piece? I22) (piece? I23) (piece? I24) (piece? I25))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? I30) (piece? I31) (piece? I32) (piece? I33) (piece? I34) (piece? I35))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I40) (piece? I41) (piece? I42) (piece? I43) (piece? I44) (piece? I45))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I50) (piece? I51) (piece? I52) (piece? I53) (piece? I54) (piece? I55))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? I60) (piece? I61) (piece? I62) (piece? I63) (piece? I64) (piece? I65))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? I70) (piece? I71) (piece? I72) (piece? I73) (piece? I74) (piece? I75))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I80) (piece? I81) (piece? I82) (piece? I83) (piece? I84) (piece? I85))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I90) (piece? I91) (piece? I92) (piece? I93) (piece? I94) (piece? I95))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? IA0) (piece? IA1) (piece? IA2) (piece? IA3) (piece? IA4) (piece? IA5))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? IB0) (piece? IB1) (piece? IB2) (piece? IB3) (piece? IB4) (piece? IB5))
          (set-flag is-checked? true)
      )
  )
)

(define check-line-up
  (set-flag is-checked? false)
  (if (and (not-flag? i-8) (not-flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I00 up) (piece? I01 up) (piece? I02 up) (piece? I03 up) (piece? I04 up) (piece? I05 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I10 up) (piece? I11 up) (piece? I12 up) (piece? I13 up) (piece? I14 up) (piece? I15 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? I20 up) (piece? I21 up) (piece? I22 up) (piece? I23 up) (piece? I24 up) (piece? I25 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (not-flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? I30 up) (piece? I31 up) (piece? I32 up) (piece? I33 up) (piece? I34 up) (piece? I35 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I40 up) (piece? I41 up) (piece? I42 up) (piece? I43 up) (piece? I44 up) (piece? I45 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I50 up) (piece? I51 up) (piece? I52 up) (piece? I53 up) (piece? I54 up) (piece? I55 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? I60 up) (piece? I61 up) (piece? I62 up) (piece? I63 up) (piece? I64 up) (piece? I65 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (not-flag? i-8) (flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? I70 up) (piece? I71 up) (piece? I72 up) (piece? I73 up) (piece? I74 up) (piece? I75 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (not-flag? i-2) (not-flag? i-1))
      (if (or (piece? I80 up) (piece? I81 up) (piece? I82 up) (piece? I83 up) (piece? I84 up) (piece? I85 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (not-flag? i-2) (flag? i-1))
      (if (or (piece? I90 up) (piece? I91 up) (piece? I92 up) (piece? I93 up) (piece? I94 up) (piece? I95 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (flag? i-2) (not-flag? i-1))
      (if (or (piece? IA0 up) (piece? IA1 up) (piece? IA2 up) (piece? IA3 up) (piece? IA4 up) (piece? IA5 up))
          (set-flag is-checked? true)
      )
  )
  (if (and (flag? i-8) (not-flag? i-4) (flag? i-2) (flag? i-1))
      (if (or (piece? IB0 up) (piece? IB1 up) (piece? IB2 up) (piece? IB3 up) (piece? IB4 up) (piece? IB5 up))
          (set-flag is-checked? true)
      )
  )
)

(define clear-points
  (init-line)
  mark a0
  (while (on-board? next)
     next
     (if (piece? Point)
          (check-line-up)
          (if (flag? is-checked?)
             capture (capture up)
          )
     )
  )
  back
)

(define jump-to-mark (
  $1 (verify (piece? MarkEnemy)) 
  capture
  $1 (verify (or empty? (piece? Point)))
  (if (piece? Point) (recovery))
  (add-partial cont-mode)
))

(define jump-to (
  $1 (verify not-empty?)
  (verify (and (not-piece? Ritor)
               (not-piece? MarkEmpty)
               (not-piece? MarkFriend)
               (not-piece? Point)
          )
  ) 
  (clear-points) capture
  $1 (verify (or empty? (piece? Point)))
  (if (piece? Point) (recovery))
  (add-partial cont-mode)
))

(define recovery
  mark up (init-line) (init-level) a0 
  (while (on-board? next)
      next
      (check-line)
      (if (flag? is-checked?) capture)
      (if (and enemy? (piece? Point))
          (check-line-up)
          (if (flag? is-checked?)
              capture (capture up)
          )
      )
      (if (not-empty? up)
          (check-line-up)
          (if (flag? is-checked?)
              (check-level-up)
              (if (flag? is-checked?)
                  (create Ritor)
              )
              (capture up)
          )
      )
  )
  back
)

(define shift-to-point (
  $1 (verify (piece? Point))
  (verify friend?)
  (recovery)
  add
))

(define shift-to (
  $1 (verify (piece? MarkEmpty))
  add
))

(define shift-from (
  $1 (verify empty?)
  (add Ritor)
))

(define find-target?
  (if (and (on-board? $1) (on-board? $2))
      (if (and (friend? $1) (or (empty? $2) (piece? Point $2)))
          (set-flag found? true)
      )
  )
)

(define mark-enemy (
  (verify enemy?)
  (verify (not-piece? Point))
  (set-flag found? false)
  (find-target? n s) (find-target? nw se)
  (find-target? s n) (find-target? sw ne)
  (find-target? w e) (find-target? ne sw)
  (find-target? e w) (find-target? se nw)
  (verify (flag? found?))
  (clear-points) add
))

(define find-empty?
  (if (on-board? $1)
      (if (empty? $1)
          (set-flag found? true)
      )
  )
)

(define mark-friend (
  (verify friend?)
  (set-flag found? false)
  (find-empty? n) (find-empty? nw)
  (find-empty? s) (find-empty? sw)
  (find-empty? w) (find-empty? ne)
  (find-empty? e) (find-empty? se)
  (verify (flag? found?))
  add
))

(define find-friend?
  (if (on-board? $1)
      (if (friend? $1)
          (if (flag? found?)
              (set-flag more? true)
           else
              (set-flag found? true)
          )
      )
  )
)

(define mark-empty (
  (verify empty?)
  (set-flag found? false)
  (set-flag more? false)
  (find-friend? n) (find-friend? nw)
  (find-friend? s) (find-friend? sw)
  (find-friend? w) (find-friend? ne)
  (find-friend? e) (find-friend? se)
  (if (in-zone? opt a1)
      (verify (flag? more?))
   else
      (verify (flag? found?))
  )
  add
))

(define shift (
  $1 (verify (or empty? (piece? Point)))
  (if (not-empty? up)
      (capture up)
  )
  add
))

(define jump (
  (create Point) (create $2 up)
  $1 (verify enemy?) capture
  (create $2 up)
  $1 (verify (or empty? (piece? Point)))
  (if (not-empty? up)
      (capture up)
  )
  (add-partial $2 jump-mode)
))

(define mark-point (
  (verify enemy?)
  (verify (piece? Point))
  (set-flag found? false)
  (set-flag more? false)
  (find-friend? n) (find-friend? nw)
  (find-friend? s) (find-friend? sw)
  (find-friend? w) (find-friend? ne)
  (find-friend? e) (find-friend? se)
  (if (in-zone? opt a1)
      (verify (flag? more?))
   else
      (verify (flag? found?))
  )
  add
))

(define board-def
  (board
    (image "../images/Anathem/board.bmp")
    (grid
      (start-rectangle 5 5 54 54)
      (dimensions
        ("a/b/c/d/e/f/g/h" (49 0)) ; files
        ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
      )
      (directions (n 0 -1) (s 0 1) (e 1 0) (w -1 0)
                  (ne 1 -1) (nw -1 -1) (se 1 1) (sw -1 1)
                  (next 0 -1)
      ) 
    )
    (grid
      (start-rectangle 5 -500 54 -450)
      (dimensions
        ("A/B/C/D/E/F/G/H" (49 0)) ; files
        ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
      )
    )
    (dummy a0)
    (links next 
        (a0 a1) (a8 b1) (b8 c1) (c8 d1) (d8 e1) (e8 f1) (f8 g1) (g8 h1)
    )
    (links up 
        (a1 A1) (b1 B1) (c1 C1) (d1 D1) (e1 E1) (f1 F1) (g1 G1) (h1 H1)
        (a2 A2) (b2 B2) (c2 C2) (d2 D2) (e2 E2) (f2 F2) (g2 G2) (h2 H2)
        (a3 A3) (b3 B3) (c3 C3) (d3 D3) (e3 E3) (f3 F3) (g3 G3) (h3 H3)
        (a4 A4) (b4 B4) (c4 C4) (d4 D4) (e4 E4) (f4 F4) (g4 G4) (h4 H4)
        (a5 A5) (b5 B5) (c5 C5) (d5 D5) (e5 E5) (f5 F5) (g5 G5) (h5 H5)
        (a6 A6) (b6 B6) (c6 C6) (d6 D6) (e6 E6) (f6 F6) (g6 G6) (h6 H6)
        (a7 A7) (b7 B7) (c7 C7) (d7 D7) (e7 E7) (f7 F7) (g7 G7) (h7 H7)
        (a8 A8) (b8 B8) (c8 C8) (d8 D8) (e8 E8) (f8 F8) (g8 G8) (h8 H8)
    )
    (zone (name opt) (players Incanters Ritors) (positions $1))
  )
)

(define i
  (piece
     (name $1)
     (description "Incanter")
     (image Incanters "../images/Anathem/Incanter.bmp")
     (moves
        (move-type jump-mode)
        (jump n $2) (jump e $2) (jump w $2) (jump s $2) 
        (jump ne $2) (jump nw $2) (jump se $2) (jump sw $2)
        (move-type normal-mode)
        (shift n) (shift e) (shift w) (shift s) 
        (shift ne) (shift nw) (shift se) (shift sw)
     )
  )
)

(game
  (title "Anathem (easy)")

  (option "animate captures"   false)
  (option "animate drops"      false)
  (option "maximal captures"   false)
  (option "pass turn"          false)
  (option "pass partial"       false)
  (option "recycle captures"   true)

  (move-sound "Audio/Pickup.wav")
  (release-sound "Audio/Pickup.wav")
  (drop-sound "Audio/Pickup.wav")
  (capture-sound "")
  (change-sound  "")
  (click-sound   "")
  (draw-sound    "")

  (players Incanters Ritors)
  (turn-order Incanters Ritors (Incanters Ritors incanter-mode))
  (move-priorities jump-mode normal-mode)
  (board-def a1)

  (piece
     (name Ritor)
     (description "Ritor")
     (image Ritors "../images/Anathem/Ritor.bmp")
     (moves
        (move-type incanter-mode)
        (shift-to n) (shift-to nw) (shift-to e) (shift-to ne)
        (shift-to s) (shift-to sw) (shift-to w) (shift-to se)
        (shift-to-point n) (shift-to-point nw) (shift-to-point e) (shift-to-point ne)
        (shift-to-point s) (shift-to-point sw) (shift-to-point w) (shift-to-point se)
        (jump-to-mark n) (jump-to-mark nw) (jump-to-mark e) (jump-to-mark ne)
        (jump-to-mark s) (jump-to-mark sw) (jump-to-mark w) (jump-to-mark se)
        (move-type cont-mode)
        (jump-to n) (jump-to nw) (jump-to e) (jump-to ne)
        (jump-to s) (jump-to sw) (jump-to w) (jump-to se)
     )
  )
  (piece
     (name MarkEmpty)
     (description " ")
     (image Ritors "../images/Anathem/mark.bmp")
     (drops
        (move-type normal-mode)
        (mark-empty)
     )
  )
  (piece
     (name MarkFriend)
     (description "Ritor")
     (image Ritors "../images/Anathem/ritorm.bmp")
     (drops
        (move-type normal-mode)
        (mark-friend)
     )
     (moves
        (move-type incanter-mode)
        (shift-from n) (shift-from nw) (shift-from e) (shift-from ne)
        (shift-from s) (shift-from sw) (shift-from w) (shift-from se)
     )
  )
  (piece
     (name MarkEnemy)
     (description "Incanter")
     (image Ritors "../images/Anathem/incanterm.bmp")
     (drops
        (move-type jump-mode)
        (mark-enemy)
     )
  )
  (piece
     (name Point)
     (description " ")
     (image Incanters "../images/Anathem/point.bmp"
            Ritors "../images/Anathem/mark.bmp")
     (drops
        (move-type normal-mode)
        (mark-point)
     )
  )
  (i I00 I01) (i I01 I02) (i I02 I03) (i I03 I04) (i I04 I05) (i I05 I00)
  (i I10 I11) (i I11 I12) (i I12 I13) (i I13 I14) (i I14 I15) (i I15 I10)
  (i I20 I21) (i I21 I22) (i I22 I23) (i I23 I24) (i I24 I25) (i I25 I20)
  (i I30 I31) (i I31 I32) (i I32 I33) (i I33 I34) (i I34 I35) (i I35 I30)
  (i I40 I41) (i I41 I42) (i I42 I43) (i I43 I44) (i I44 I45) (i I45 I40)
  (i I50 I51) (i I51 I52) (i I52 I53) (i I53 I54) (i I54 I55) (i I55 I50)
  (i I60 I61) (i I61 I62) (i I62 I63) (i I63 I64) (i I64 I65) (i I65 I60)
  (i I70 I71) (i I71 I72) (i I72 I73) (i I73 I74) (i I74 I75) (i I75 I70)
  (i I80 I81) (i I81 I82) (i I82 I83) (i I83 I84) (i I84 I85) (i I85 I80)
  (i I90 I91) (i I91 I92) (i I92 I93) (i I93 I94) (i I94 I95) (i I95 I90)
  (i IA0 IA1) (i IA1 IA2) (i IA2 IA3) (i IA3 IA4) (i IA4 IA5) (i IA5 IA0)
  (i IB0 IB1) (i IB1 IB2) (i IB2 IB3) (i IB3 IB4) (i IB4 IB5) (i IB5 IB0)

  (board-setup
    (Incanters
       (I00 b2) (I10 c2) (I20 d2) (I30 e2) (I40 f2) (I50 g2)
       (I60 b3) (I70 c3) (I80 d3) (I90 e3) (IA0 f3) (IB0 g3)
    )
    (Ritors 
       (Ritor b7 c7 d7 e7 f7 g7 b6 c6 d6 e6 f6 g6) 
       (MarkEmpty off 1) (MarkFriend off 10) (MarkEnemy off 1) (Point off 1)
    )
  )

  (loss-condition (Incanters Ritors) (pieces-remaining 0) )
)

(variant
  (title "Anathem (hard)")
  (board-def a2)
)
