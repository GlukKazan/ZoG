(define dp-nw (
   (pre-check-3 e s plane)
   (check-p se sw e nw se ne s)
   (check-d s e)
   (pre-action s e)
   (post-action nw se ne e sw s)
))

(define dp-ne (
   (pre-check-4 w s plane w)
   (check-p sw se w nw s ne sw)
   (check-d s w)
   (pre-action s w)
   (post-action ne sw nw w se s)
))

(define dp-se (
   (pre-check-4 w n plane nw)
   (check-p nw sw n ne w se nw)
   (check-d n w)
   (pre-action n w)
   (post-action se nw ne n sw w)
))

(define dp-sw (
   (pre-check-4 e n plane n)
   (check-p ne nw e se n sw ne)
   (check-d n e)
   (pre-action n e)
   (post-action sw ne nw n se e)
))

(define de-nw (
   (pre-check-3 e s empty-plane)
   (check-e e s se)
   (post-action nw se ne e sw s)
))                          

(define de-ne (
   (pre-check-4 w s empty-plane w)
   (check-e w s sw)
   (post-action ne sw nw w se s)
))

(define de-se (
   (pre-check-4 w n empty-plane nw)
   (check-e n w nw)
   (post-action se nw ne n sw w)
))

(define de-sw (
   (pre-check-4 e n empty-plane n)
   (check-e e n ne)
   (post-action sw ne nw n se e)
))

(define pre-check-3
   (verify (on-board? $1))
   (verify (on-board? $2))
   (verify (in-zone? $3))
)

(define pre-check-4
   (verify (on-board? $1))
   (verify (on-board? $2))
   (verify (in-zone? $3 $4))
)

(define check-p
   (verify (piece? t$1))
   (verify (piece? t$2 $3))
   (verify (piece? t$4 $5))
   (verify (piece? t$6 $7))
)

(define check-e
   (verify empty?)
   (verify (empty? $1))
   (verify (empty? $2))
   (verify (empty? $3))
)

(define post-action
   (create t$1)
   (create t$2 $2)
   (create t$3 $4)
   (create t$5 $6)
   add
)

(define check-d
   mark
   b
   (while (and not-empty? (not-in-zone? plane))
       (verify (not-empty? $1))
       (verify (not-empty? $2))
       (verify (not-empty? $1$2))
       u
   )
   (verify (empty? $1))
   (verify (empty? $2))
   (verify (empty? $1$2))
   back
)

(define get-piece
   (set-flag is-piece? false)
   (set-flag is-black? false)
   (set-flag is-left?  false)
   (set-flag is-top?   false)
   (if not-empty?
       (set-flag is-piece? true)
       (if (and enemy? (in-zone? im a1I))
           (set-flag is-black? true)
       )
       (if (and friend? (in-zone? im a2I))
           (set-flag is-black? true)
       )
       (if (or (piece? tnw) (piece? tne))
           (set-flag is-top?   true)
       )
       (if (or (piece? tnw) (piece? tsw))
           (set-flag is-left?  true)
       )
   )
)

(define add-piece-type
   (if (flag? is-top?)
       (if (flag? is-left?)
           (create $1 tnw)
        else
           (create $1 tne)
       )
    else
       (if (flag? is-left?)
           (create $1 tsw)
        else
           (create $1 tse)
       )
   )
)

(define add-piece
   (if (flag? is-piece?)
       (if (flag? is-black?)
           (add-piece-type B)
        else
           (add-piece-type R)
       )
   )
)

(define copy-piece
   b
   (while (and not-empty? (not-in-zone? plane)) u)
   (verify empty?)
   (add-piece)
)

(define pre-action
   mark
   (get-piece) (copy-piece)
   back $1
   (get-piece) (copy-piece)
   back $2
   (get-piece) (copy-piece)
   back $1$2
   (get-piece) (copy-piece)
   back
)

(define clean-piece
   (set-flag is-piece? false)
   d (while empty? d)
   (while (and not-empty? (position-flag? is-dead?))
        capture
        d
   )
   (if not-empty?
        (get-piece)
        capture
   )
   (while (not-in-zone? plane) u)
   (if (flag? is-piece?)
        (add-piece)
    else
        capture
   )
)

(define clean-pieces
   mark a0
   (while (on-board? next)
        next
        (if (and not-empty? (position-flag? is-dead?))
            (if (empty? b)
                 capture
             else
                 (clean-piece)
            )
        )
   )
   back
)

(define check-top
   (verify (on-board? $1))
   (if (and (not-empty? $1) (not-position-flag? is-dead? $1) (not-position-flag? is-current? $1))
        $1 
        (set-position-flag is-current? true)
        (if (not-piece? t$3)
            d (while (and empty? (on-board? d)) d)
            (verify not-empty?)
            (if (and not-empty? (not-position-flag? is-dead?) (not-position-flag? is-current?))
                (set-position-flag is-current? true)
            )
            (while (not-in-zone? plane) u)
        )
        $2
   )
)

(define check-deep
   (verify (on-board? $1))
   (if (and (not-empty? $1) (not-position-flag? is-dead? $1) (not-position-flag? is-current? $1))
       $1
       (set-position-flag is-current? true)
       (verify (on-board? u))
       (if (and (not-empty? u) (not-position-flag? is-dead? u) (not-position-flag? is-current? u))
           u (set-position-flag is-current? true) d
       )
       $2
   )
)

(define proceed-current
   (set-position-flag is-dead? true)
   (set-position-flag is-current? false)
   (get-piece)
   (if (in-zone? plane)
       (if (flag? is-left?)
           (if (flag? is-top?)
               (check-top e w ne)
               (check-top s n sw)
            else
               (check-top e w se)
               (check-top n s nw)
           )
        else
           (if (flag? is-top?)
               (check-top w e nw)
               (check-top s n se)
            else
               (check-top w e sw)
               (check-top n s ne)
           )
       )
    else
       (if (flag? is-left?)
           (check-deep e w)
        else
           (check-deep w e)
       )
       (if (flag? is-top?)
           (check-deep s n)
        else
           (check-deep n s)
       )
   )
)

(define proceed-all
   (set-flag is-done? false)
   (while (not-flag? is-done?)
        (set-flag is-done? true)
        mark a0
        (while (on-board? next-all)
             next-all
             (if (position-flag? is-current?)
                 (set-flag is-done? false)
                 (proceed-current)
             )
        )
        back
   )
)

(define dp-clear (
   (verify not-empty?)
   (set-position-flag is-current? true)
   (proceed-all)
   (clean-pieces)
   add
))

(game 
   (title "MarGo board")

   (drop-sound    "Audio/Pickup.wav")
   (capture-sound "")

   (option "recycle captures" true)
   (option "animate drops"    false)
   (option "animate captures" false)

   (players    R B)
   (turn-order R B)

   (board
      (image "../images/margo/board.bmp")
      (grid
         (start-rectangle 30 30 59 59)
         (dimensions
             ("a/b/c/d/e/f/g/h/i/j/k/l/m/n" (30 0)) ; files
             ("14/13/12/11/10/9/8/7/6/5/4/3/2/1" (0 30)) ; ranks
             ("I/II/III/IV/V/VI/VII/VIII" (1600 0))  ;layers
         )
         (directions (n   0 -1 0) (e  1  0 0) (s  0  1 0) (w -1 0 0)
                     (nw -1 -1 0) (ne 1 -1 0) (sw -1 1 0) (se 1 1 0)
                     (u 0 0 -1) (d 0 0 1) (next 0 -1 0) (next-all 0 -1 0)
         )
      )
      (dummy a0)
      (links next (a0 a1I)   (a14I b1I) (b14I c1I) (c14I d1I) (d14I e1I)
                  (e14I f1I) (f14I g1I) (g14I h1I) (h14I i1I) (i14I j1I)
                  (j14I k1I) (k14I l1I) (l14I m1I) (m14I n1I)
      )
      (links next-all (a0 a1I) (a14I b1I) (b14I c1I) (c14I d1I) (d14I e1I)
                  (e14I f1I) (f14I g1I) (g14I h1I) (h14I i1I)  (i14I j1I)
                  (j14I k1I) (k14I l1I) (l14I m1I) (m14I n1I)  (n14I b2VII)
                  (b14VII c2VII) (c14VII d2VII) (d14VII e2VII) (e14VII f2VII)
                  (f14VII g2VII) (g14VII h2VII) (h14VII i2VII) (i14VII j2VII) 
                  (j14VII k2VII) (k14VII l2VII) (l14VII m2VII) (m14VII c3VI)
                  (c14VI  d3VI)  (d14VI  e3VI)  (e14VI  f3VI)  (f14VI  g3VI)
                  (g14VI  h3VI)  (h14VI  i3VI)  (i14VI  j3VI)  (j14VI  k3VI)
                  (k14VI  l3VI)  (l14VI  d4V)   (d14V   e4V)   (e14V   f4V)
                  (f14V g4V)     (g14V   h4V)   (h14V   i4V)   (i14V   j4V)
                  (j14V k4V)     (k14V   e5IV)  (e14IV  f5IV)  (f14IV  g5IV)
                  (g14IV h5IV)   (h14IV  i5IV)  (i14IV  j5IV)  (j14IV  f6III)
                  (f14III g6III) (g14III h6III) (h14III i6III) (i14III g7II)
                  (g14II h7II)
      )
      (links b    (a1I a1VII) (a2I a2VII) (a3I a3VII) (a4I a4VII) (a5I a5VII) (a6I a6VII) (a7I a7VII) (a8I a8VII) (a9I a9VII) (a10I a10VII) (a11I a11VII) (a12I a12VII) (a13I a13VII) (a14I a14VII)
                  (b1I b1VII) (b2I b2VII) (b3I b3VII) (b4I b4VII) (b5I b5VII) (b6I b6VII) (b7I b7VII) (b8I b8VII) (b9I b9VII) (b10I b10VII) (b11I b11VII) (b12I b12VII) (b13I b13VII) (b14I b14VII)
                  (c1I c1VII) (c2I c2VII) (c3I c3VII) (c4I c4VII) (c5I c5VII) (c6I c6VII) (c7I c7VII) (c8I c8VII) (c9I c9VII) (c10I c10VII) (c11I c11VII) (c12I c12VII) (c13I c13VII) (c14I c14VII)
                  (d1I d1VII) (d2I d2VII) (d3I d3VII) (d4I d4VII) (d5I d5VII) (d6I d6VII) (d7I d7VII) (d8I d8VII) (d9I d9VII) (d10I d10VII) (d11I d11VII) (d12I d12VII) (d13I d13VII) (d14I d14VII)
                  (e1I e1VII) (e2I e2VII) (e3I e3VII) (e4I e4VII) (e5I e5VII) (e6I e6VII) (e7I e7VII) (e8I e8VII) (e9I e9VII) (e10I e10VII) (e11I e11VII) (e12I e12VII) (e13I e13VII) (e14I e14VII)
                  (f1I f1VII) (f2I f2VII) (f3I f3VII) (f4I f4VII) (f5I f5VII) (f6I f6VII) (f7I f7VII) (f8I f8VII) (f9I f9VII) (f10I f10VII) (f11I f11VII) (f12I f12VII) (f13I f13VII) (f14I f14VII)
                  (g1I g1VII) (g2I g2VII) (g3I g3VII) (g4I g4VII) (g5I g5VII) (g6I g6VII) (g7I g7VII) (g8I g8VII) (g9I g9VII) (g10I g10VII) (g11I g11VII) (g12I g12VII) (g13I g13VII) (g14I g14VII)
                  (h1I h1VII) (h2I h2VII) (h3I h3VII) (h4I h4VII) (h5I h5VII) (h6I h6VII) (h7I h7VII) (h8I h8VII) (h9I h9VII) (h10I h10VII) (h11I h11VII) (h12I h12VII) (h13I h13VII) (h14I h14VII)
                  (i1I i1VII) (i2I i2VII) (i3I i3VII) (i4I i4VII) (i5I i5VII) (i6I i6VII) (i7I i7VII) (i8I i8VII) (i9I i9VII) (i10I i10VII) (i11I i11VII) (i12I i12VII) (i13I i13VII) (i14I i14VII)
                  (j1I j1VII) (j2I j2VII) (j3I j3VII) (j4I j4VII) (j5I j5VII) (j6I j6VII) (j7I j7VII) (j8I j8VII) (j9I j9VII) (j10I j10VII) (j11I j11VII) (j12I j12VII) (j13I j13VII) (j14I j14VII)
                  (k1I k1VII) (k2I k2VII) (k3I k3VII) (k4I k4VII) (k5I k5VII) (k6I k6VII) (k7I k7VII) (k8I k8VII) (k9I k9VII) (k10I k10VII) (k11I k11VII) (k12I k12VII) (k13I k13VII) (k14I k14VII)
                  (l1I l1VII) (l2I l2VII) (l3I l3VII) (l4I l4VII) (l5I l5VII) (l6I l6VII) (l7I l7VII) (l8I l8VII) (l9I l9VII) (l10I l10VII) (l11I l11VII) (l12I l12VII) (l13I l13VII) (l14I l14VII)
                  (m1I m1VII) (m2I m2VII) (m3I m3VII) (m4I m4VII) (m5I m5VII) (m6I m6VII) (m7I m7VII) (m8I m8VII) (m9I m9VII) (m10I m10VII) (m11I m11VII) (m12I m12VII) (m13I m13VII) (m14I m14VII)
                  (n1I n1VII) (n2I n2VII) (n3I n3VII) (n4I n4VII) (n5I n5VII) (n6I n6VII) (n7I n7VII) (n8I n8VII) (n9I n9VII) (n10I n10VII) (n11I n11VII) (n12I n12VII) (n13I n13VII) (n14I n14VII)
      )
      (zone (name im) (players R)
            (positions a1I)
      )
      (zone (name im) (players B)
            (positions a2I)
      )
      (zone (name empty-plane) (players R B)
            (positions a2I a4I a6I a8I a10I a12I a14I
                       c2I c4I c6I c8I c10I c12I c14I
                       e2I e4I e6I e8I e10I e12I e14I
                       g2I g4I g6I g8I g10I g12I g14I
                       i2I i4I i6I i8I i10I i12I i14I
                       k2I k4I k6I k8I k10I k12I k14I
                       m2I m4I m6I m8I m10I m12I m14I
            )
      )
      (zone (name plane) (players R B)
            (positions a1I a2I a3I a4I a5I a6I a7I a8I a9I a10I a11I a12I a13I a14I
                       b1I b2I b3I b4I b5I b6I b7I b8I b9I b10I b11I b12I b13I b14I
                       c1I c2I c3I c4I c5I c6I c7I c8I c9I c10I c11I c12I c13I c14I
                       d1I d2I d3I d4I d5I d6I d7I d8I d9I d10I d11I d12I d13I d14I
                       e1I e2I e3I e4I e5I e6I e7I e8I e9I e10I e11I e12I e13I e14I
                       f1I f2I f3I f4I f5I f6I f7I f8I f9I f10I f11I f12I f13I f14I
                       g1I g2I g3I g4I g5I g6I g7I g8I g9I g10I g11I g12I g13I g14I
                       h1I h2I h3I h4I h5I h6I h7I h8I h9I h10I h11I h12I h13I h14I
                       i1I i2I i3I i4I i5I i6I i7I i8I i9I i10I i11I i12I i13I i14I
                       j1I j2I j3I j4I j5I j6I j7I j8I j9I j10I j11I j12I j13I j14I
                       k1I k2I k3I k4I k5I k6I k7I k8I k9I k10I k11I k12I k13I k14I
                       l1I l2I l3I l4I l5I l6I l7I l8I l9I l10I l11I l12I l13I l14I
                       m1I m2I m3I m4I m5I m6I m7I m8I m9I m10I m11I m12I m13I m14I
                       n1I n2I n3I n4I n5I n6I n7I n8I n9I n10I n11I n12I n13I n14I
            )
      )
   )

   (piece
      (name  M)
      (image R "../images/margo/m.bmp"
             B "../images/margo/m.bmp")
      (drops (de-nw) (dp-nw)
             (de-ne) (dp-ne)
             (de-se) (dp-se)
             (de-sw) (dp-sw)

             (dp-clear)
      )
   )
   (piece
      (name  tnw)
      (image R "../images/margo/w-nw.bmp"
             B "../images/margo/b-nw.bmp")
      (attribute is-ko? false)
   )
   (piece
      (name  tne)
      (image R "../images/margo/w-ne.bmp"
             B "../images/margo/b-ne.bmp")
      (attribute is-ko? false)
   )
   (piece
      (name  tse)
      (image R "../images/margo/w-se.bmp"
             B "../images/margo/b-se.bmp")
      (attribute is-ko? false)
   )
   (piece
      (name  tsw)
      (image R "../images/margo/w-sw.bmp"
             B "../images/margo/b-sw.bmp")
      (attribute is-ko? false)
   )

   (board-setup
      (R (M off 1) )
      (B (M off 1) )
   )
)
