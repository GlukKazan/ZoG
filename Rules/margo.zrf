(define dp-nw (
   (pre-check-3 e s plane)
   (check-p se sw e nw se ne s)
   (check-d s e)
   (pre-action s e)
   (post-action nw se ne e sw s)
))

(define dp-ne (
   (pre-check-4 w s plane w)
   (check-p sw se w nw s ne sw)
   (check-d s w)
   (pre-action s w)
   (post-action ne sw nw w se s)
))

(define dp-se (
   (pre-check-4 w n plane nw)
   (check-p nw sw n ne w se nw)
   (check-d n w)
   (pre-action n w)
   (post-action se nw ne n sw w)
))

(define dp-sw (
   (pre-check-4 e n plane n)
   (check-p ne nw e se n sw ne)
   (check-d n e)
   (pre-action n e)
   (post-action sw ne nw n se e)
))

(define de-nw (
   (pre-check-3 e s empty-plane)
   (check-e e s se)
   (post-action nw se ne e sw s)
))                          

(define de-ne (
   (pre-check-4 w s empty-plane w)
   (check-e w s sw)
   (post-action ne sw nw w se s)
))

(define de-se (
   (pre-check-4 w n empty-plane nw)
   (check-e n w nw)
   (post-action se nw ne n sw w)
))

(define de-sw (
   (pre-check-4 e n empty-plane n)
   (check-e e n ne)
   (post-action sw ne nw n se e)
))

(define pre-check-3
   (verify (on-board? $1))
   (verify (on-board? $2))
   (verify (in-zone? $3))
)

(define pre-check-4
   (verify (on-board? $1))
   (verify (on-board? $2))
   (verify (in-zone? $3 $4))
)

(define check-p
   (verify (piece? t-$1))
   (verify (piece? t-$2 $3))
   (verify (piece? t-$4 $5))
   (verify (piece? t-$6 $7))
)

(define check-e
   (verify empty?)
   (verify (empty? $1))
   (verify (empty? $2))
   (verify (empty? $3))
)

(define post-action
   (create t-$1)
   (create t-$2 $2)
   (create t-$3 $4)
   (create t-$5 $6)
   add
)

(define check-d
   mark
   u
   (while not-empty?
       (verify (not-empty? $1))
       (verify (not-empty? $2))
       (verify (not-empty? $1$2))
       u
   )
   (verify (empty? $1))
   (verify (empty? $2))
   (verify (empty? $1$2))
   back
)

(define pre-action
   mark
   (copy-p t-nw)
   (copy-p t-ne)
   (copy-p t-sw)
   (copy-p t-se)
   back $1
   (copy-p t-nw)
   (copy-p t-ne)
   (copy-p t-sw)
   (copy-p t-se)
   back $2
   (copy-p t-nw)
   (copy-p t-ne)
   (copy-p t-sw)
   (copy-p t-se)
   back $1$2
   (copy-p t-nw)
   (copy-p t-ne)
   (copy-p t-sw)
   (copy-p t-se)
   back
)

(define copy-d
   u
   (while not-empty? u)
   (verify empty?)
   (create $1 $2)
)

(define copy-p
   (if (piece? $1)
       (if (in-zone? im a1I)
           (if friend?
               (copy-d W $1)
            else
               (copy-d B $1)
           )
       )
       (if (in-zone? im a2I)
           (if friend?
               (copy-d B $1)
            else
               (copy-d W $1)
           )
       )
   )
)

(game 
   (title "MarGo board")

   (drop-sound    "Audio/Pickup.wav")
   (capture-sound "")

   (option "recycle captures" true)
   (option "animate drops"    false)
   (option "animate captures" false)

   (players    W B)
   (turn-order W B)

   (board
      (image "../images/margo/board.bmp")
      (grid   ;main playing board
         (start-rectangle 30 36 59 71)
         (dimensions
             ("a/b/c/d/e/f/g/h/i/j/k/l/m/n" (30 0)) ; files
             ("14/13/12/11/10/9/8/7/6/5/4/3/2/1" (0 36)) ; ranks
             ("I/II/III/IV/V/VI/VII" (1600 0))  ;layers
         )
         (directions (n   0 -1 0) (e  1  0 0) (s  0  1 0) (w -1 0 0)
                     (nw -1 -1 0) (ne 1 -1 0) (sw -1 1 0) (se 1 1 0)
                     (u 0 0 1)
         )
      )
      (zone (name im) (players W)
            (positions a1I)
      )
      (zone (name im) (players B)
            (positions a2I)
      )
      (zone (name empty-plane) (players W B)
            (positions a2I a4I a6I a8I a10I a12I a14I
                       c2I c4I c6I c8I c10I c12I c14I
                       e2I e4I e6I e8I e10I e12I e14I
                       g2I g4I g6I g8I g10I g12I g14I
                       i2I i4I i6I i8I i10I i12I i14I
                       k2I k4I k6I k8I k10I k12I k14I
                       m2I m4I m6I m8I m10I m12I m14I
            )
      )
      (zone (name plane) (players W B)
            (positions a1I a2I a3I a4I a5I a6I a7I a8I a9I a10I a11I a12I a13I a14I
                       b1I b2I b3I b4I b5I b6I b7I b8I b9I b10I b11I b12I b13I b14I
                       c1I c2I c3I c4I c5I c6I c7I c8I c9I c10I c11I c12I c13I c14I
                       d1I d2I d3I d4I d5I d6I d7I d8I d9I d10I d11I d12I d13I d14I
                       e1I e2I e3I e4I e5I e6I e7I e8I e9I e10I e11I e12I e13I e14I
                       f1I f2I f3I f4I f5I f6I f7I f8I f9I f10I f11I f12I f13I f14I
                       g1I g2I g3I g4I g5I g6I g7I g8I g9I g10I g11I g12I g13I g14I
                       h1I h2I h3I h4I h5I h6I h7I h8I h9I h10I h11I h12I h13I h14I
                       i1I i2I i3I i4I i5I i6I i7I i8I i9I i10I i11I i12I i13I i14I
                       j1I j2I j3I j4I j5I j6I j7I j8I j9I j10I j11I j12I j13I j14I
                       k1I k2I k3I k4I k5I k6I k7I k8I k9I k10I k11I k12I k13I k14I
                       l1I l2I l3I l4I l5I l6I l7I l8I l9I l10I l11I l12I l13I l14I
                       m1I m2I m3I m4I m5I m6I m7I m8I m9I m10I m11I m12I m13I m14I
                       n1I n2I n3I n4I n5I n6I n7I n8I n9I n10I n11I n12I n13I n14I
            )
      )
   )

   (piece
      (name  M)
      (image W "../images/margo/m.bmp"
             B "../images/margo/m.bmp")
      (drops (de-nw) (dp-nw)
             (de-ne) (dp-ne)
             (de-se) (dp-se)
             (de-sw) (dp-sw)
      )
   )
   (piece
      (name  t-nw)
      (image W "../images/margo/w-nw.bmp"
             B "../images/margo/b-nw.bmp")
   )
   (piece
      (name  t-ne)
      (image W "../images/margo/w-ne.bmp"
             B "../images/margo/b-ne.bmp")
   )
   (piece
      (name  t-se)
      (image W "../images/margo/w-se.bmp"
             B "../images/margo/b-se.bmp")
   )
   (piece
      (name  t-sw)
      (image W "../images/margo/w-sw.bmp"
             B "../images/margo/b-sw.bmp")
   )

   (board-setup
      (W (M off 1) )
      (B (M off 1) )
   )
)
