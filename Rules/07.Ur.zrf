(version "2.0")

(define drop-dice
  ( (verify (in-zone? dices))
    (verify empty?)
    add
  )
)

(define clear-dices
  mark
  x1
  (while (not-position? offboard)
     capture
     next
  )
  back
)

(define check-0-dices
  mark
  (set-flag zero-dices true)
  x1
  (while (not-position? offboard)
     (if (piece? wdice)
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? zero-dices))
  back
)

(define check-1-dices
  mark
  (set-flag zero-dices true)
  (set-flag one-dices false)
  x1
  (while (not-position? offboard)
     (if (piece? wdice)
         (if (flag? zero-dices)
             (set-flag one-dices true)
          else
             (set-flag one-dices false)
         )
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? one-dices))
  back
)

(define check-2-dices
  mark
  (set-flag zero-dices true)
  (set-flag one-dices false)
  x1
  (while (not-position? offboard)
     (if (piece? bdice)
         (if (flag? zero-dices)
             (set-flag one-dices true)
          else
             (set-flag one-dices false)
         )
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? one-dices))
  back
)

(define check-3-dices
  mark
  (set-flag zero-dices true)
  x1
  (while (not-position? offboard)
     (if (piece? bdice)
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? zero-dices))
  back
)

(define clear-rosette
  mark
  x4
  capture
  back
)

(define check-rosette
  (if (in-zone? rosette)
      mark
      x4
      (create $1 lock)
      back
   else
      (clear-rosette)
  )
)

(define check-lock
  mark
  x4
  (verify not-friend?)
  back
)

(define check-end
  (if (in-zone? end)
      capture
      (clear-rosette)
      add
  )
  (verify (not-in-zone? end))
)

(define check-enemy
  mark
  (if (piece? $3)
      z2
      afree
      (while (and (not-position? offboard) not-empty?)
           afree
      )
      (if (not-position? offboard)
          (create $1 $2)
          back
          (check-rosette $1)
          add
      )
   else
      (verify empty?)
      back
      (check-rosette $1)
      add
  )
)
 
(define check-enemy-promouted
  mark
  (if (piece? $4)
      z2
      afree
      (while (and (not-position? offboard) not-empty?)
           afree
      )
      (if (not-position? offboard)
          (create $1 $2)
          back
          (check-rosette $1)
          (add $3)
      )
   else
      back
      (verify empty?)
      (check-rosette $1)
      (add $3)
  )
)

(define step-1
  ( (check-lock)
    (check-1-dices)
    (clear-dices)
    $1
    (check-end)
    (verify not-friend?)
    mark
    (go from)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6)
     else
         back
         (check-enemy $2 $3 $5)
    )
  )
)

(define step-2
  ( (check-lock)
    (check-2-dices)
    (clear-dices)
    $1 $1
    (check-end)
    (verify not-friend?)
    mark
    (go from)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6)
          else
              back
              (check-enemy $2 $3 $5)
         )
    )
  )
)

(define step-3
  ( (check-lock)
    (check-3-dices)
    (clear-dices)
    $1 $1 $1
    (check-end)
    (verify not-friend?)
    mark
    (go from)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6)
          else
              $1
              (if (in-zone? promotion)
                   back
                   (check-enemy-promouted $2 $3 $4 $6)
               else
                   back
                   (check-enemy $2 $3 $5)
              )
         )
    )
  )
)

(define step-4
  ( (check-lock)
    (check-0-dices)
    (clear-dices)
    $1 $1 $1 $1
    (check-end)
    (verify not-friend?)
    mark
    (go from)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6)
          else
              $1
              (if (in-zone? promotion)
                   back
                   (check-enemy-promouted $2 $3 $4 $6)
               else
                   $1
                   (if (in-zone? promotion)
                        back
                        (check-enemy-promouted $2 $3 $4 $6)
                    else
                        back
                        (check-enemy $2 $3 $5)
                   )
              )
         )
    )
  )
)

(define board-defs
  (image "images/Ur/board.bmp")
  (grid
     (start-rectangle -34 -13 26 79)
     (dimensions
         ("z/a/b/c/d/e/f/g/h/x" (67 0)) ; files
         ("4/3/2/1/0" (0 66)) ; ranks
     )    
  )
  (dummy offboard)
  (links afree (z2 a4) (a4 b4) (b4 c4) (c4 d4) (d4 e4) (e4 f4) (f4 g4) (g4 offboard) )
  (links bfree (z2 a0) (a0 b0) (b0 c0) (c0 d0) (d0 e0) (e0 f0) (f0 g0) (g0 offboard) )
  (links anext (a0 d1) (b0 d1) (c0 d1) (d0 d1) (e0 d1) (f0 d1) (g0 d1)
               (d1 c1) (c1 b1) (b1 a1) (a1 a2) (a2 b2) (b2 c2) (c2 d2) 
               (d2 e2) (e2 f2) (f2 g2) (g2 g1) (g1 h1) (h1 h2) (h2 h3)
               (h3 g3) (g3 g2)
  )
  (links cnext (h2 h3) (h3 g3) (g3 g2) (g2 f2) (f2 e2) (e2 d2) (d2 c2)
               (c2 b2) (b2 a2) (a2 z2) 
  )
  (links bnext (a4 d3) (b4 d3) (c4 d3) (d4 d3) (e4 d3) (f4 d3) (g4 d3) 
               (d3 c3) (c3 b3) (b3 a3) (a3 a2) (a2 b2) (b2 c2) (c2 d2) 
               (d2 e2) (e2 f2) (f2 g2) (g2 g3) (g3 h3) (h3 h2) (h2 h1) 
               (h1 g1) (g1 g2)
  )
  (links dnext (h2 h1) (h1 g1) (g1 g2) (g2 f2) (f2 e2) (e2 d2) (d2 c2)
               (c2 b2) (b2 a2) (a2 z2)
  )
  (links next  (x1 x2) (x2 x3) (x3 offboard) )
  (symmetry Up (anext bnext) (cnext dnext) (afree bfree))
  (zone
     (name dices)
     (players ?Dice)
     (positions x1 x2 x3)
  )
  (zone
     (name promotion)
     (players Down)
     (positions h1)
  )
  (zone
     (name promotion)
     (players Up)
     (positions h3)
  )
  (zone
     (name rosette)
     (players Up Down)
     (positions a1 a3 d2 g1 g3)
  )
  (zone
     (name end)
     (players Up Down)
     (positions z2)
  )
)

(game
   (title "Ur")

   (option "animate captures" false)
   (option "animate drops" false)
   (option "show moves list" false)
   (option "pass turn" forced)
   (option "highlight goals" false)
   (option "prevent flipping" true)
   (option "recycle captures" true)

   (drop-sound "Audio/Dice_cup.wav")
   (move-sound "Audio/Clack.wav")

   (capture-sound "")

   (players Up Down ?Dice)

   (turn-order Down repeat 
               ?Dice ?Dice ?Dice Up
               ?Dice ?Dice ?Dice Down)

   (board (board-defs) )
   (board-setup
          (?Dice (wdice x3 off 2) (bdice x2 x1 off 1) )
          (Up    (uinitial a4 b4 c4 d4 e4 f4 g4) )
          (Down  (dinitial a0 b0 c0 d0 e0 f0 g0) )
   )

   (piece
	  (name wdice)
          (image ?Dice "images/Ur/wdice.bmp")
          (drops (drop-dice) )
   )
   (piece
	  (name bdice)
          (image ?Dice "images/Ur/bdice.bmp")
          (drops (drop-dice) )
   )
   (piece
	  (name lock)
          (image Up    "images/Ur/invisible.bmp"
                 Down  "images/Ur/invisible.bmp")
   )

   (piece
	  (name  uinitial)
          (image Up   "images/Ur/binit.bmp")
      (moves
          (step-1 anext Down dinitial upromouted dinitial dpromouted)
          (step-2 anext Down dinitial upromouted dinitial dpromouted)
          (step-3 anext Down dinitial upromouted dinitial dpromouted)
          (step-4 anext Down dinitial upromouted dinitial dpromouted)
      )
   )
   (piece
	  (name  upromouted)
          (image Up   "images/Ur/bprom.bmp")
      (moves
          (step-1 cnext Down dinitial upromouted dpromouted dpromouted)
          (step-2 cnext Down dinitial upromouted dpromouted dpromouted)
          (step-3 cnext Down dinitial upromouted dpromouted dpromouted)
          (step-4 cnext Down dinitial upromouted dpromouted dpromouted)
      )
   )
   (piece
	  (name  dinitial)
          (image Down "images/Ur/winit.bmp")
      (moves
          (step-1 anext Up uinitial dpromouted uinitial upromouted)
          (step-2 anext Up uinitial dpromouted uinitial upromouted)
          (step-3 anext Up uinitial dpromouted uinitial upromouted)
          (step-4 anext Up uinitial dpromouted uinitial upromouted)
      )
   )
   (piece
	  (name  dpromouted)
          (image Down "images/Ur/wprom.bmp")
      (moves
          (step-1 cnext Up uinitial dpromouted upromouted upromouted)
          (step-2 cnext Up uinitial dpromouted upromouted upromouted)
          (step-3 cnext Up uinitial dpromouted upromouted upromouted)
          (step-4 cnext Up uinitial dpromouted upromouted upromouted)
      )
   )
   (win-condition (Up Down) (and (pieces-remaining 0 uinitial) 
                                 (pieces-remaining 0 upromouted) 
                                 (pieces-remaining 0 dinitial)
                                 (pieces-remaining 0 dpromouted) ) )
)