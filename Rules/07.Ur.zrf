(version "2.0")

(define drop-dice
  ( (verify (in-zone? dices) )
    (verify empty?)
    mark
    x0
    capture
    back
    add
  )
)

(define clear-dices
  ( (verify (in-zone? dices-lock))
    (verify empty?)
    mark
    x1
    (while (not-position? offboard)
       capture
       next
    )
    back
    add
  )
)

(define check-0-dices
  mark
  (set-flag zero-dices true)
  x1
  (while (not-position? offboard)
     (if (piece? wdice)
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? zero-dices))
  back
)

(define check-1-dices
  mark
  (set-flag zero-dices true)
  (set-flag one-dices false)
  x1
  (while (not-position? offboard)
     (if (piece? wdice)
         (if (flag? zero-dices)
             (set-flag one-dices true)
          else
             (set-flag one-dices false)
         )
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? one-dices))
  back
)

(define check-2-dices
  mark
  (set-flag zero-dices true)
  (set-flag one-dices false)
  x1
  (while (not-position? offboard)
     (if (piece? bdice)
         (if (flag? zero-dices)
             (set-flag one-dices true)
          else
             (set-flag one-dices false)
         )
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? one-dices))
  back
)

(define check-3-dices
  mark
  (set-flag zero-dices true)
  x1
  (while (not-position? offboard)
     (if (piece? bdice)
         (set-flag zero-dices false)
     )
     next
  )
  (verify (flag? zero-dices))
  back
)

(define clear-rosette
  mark
  x4
  capture
  back
) 

(define check-rosette
  (if (in-zone? rosette)
      mark
      x4
      (create $1 $2)
      back
   else
      (clear-rosette)
  )
)

(define check-lock
  mark
  x4
  (verify (or (piece? $1) empty?) )
  back
)

(define check-end
  (if (in-zone? end)
      capture
      (clear-rosette)
      add
  )
  (verify (not-in-zone? end))
)

(define push-piece
  (if (piece? $2)
       up
       (while (and (not-position? offboard) not-empty?)
           up
       )
       (verify (not-position? offboard))
       (create $1 $2)
  )
)

(define pop-pieces
  (if (piece? uinitial)
       capture
       (go from)
       (create $1 uinitial)
   else
       (if (piece? dinitial)
            capture
            (go from)
            (create Down dinitial)
        else
            (if (piece? upromouted)
                 capture
                 (go from)
                 (create $1 upromouted)
             else
                 (if (piece? dpromouted)
                      capture
                      (go from)
                      (create Down dpromouted)
                )
           )
      )
  )
)

(define check-depo
  (if (in-zone? depo)
      (verify not-enemy?)
  )
  mark
  (push-piece $1 uinitial)
  (push-piece Down dinitial)
  (push-piece $1 upromouted)
  (push-piece Down dpromouted)
  back
)

(define check-stack
  (if (or (in-zone? depo) (in-zone? safe))
      up up up
      (if not-empty?
          (pop-pieces $1)
       else
          (go from)
          up up
          (if not-empty?
              (pop-pieces $1)
           else
              (go from)
              up
              (if not-empty?
                  (pop-pieces $1)
               else
                  (go from)
              )
          )
      )
  )
)

(define check-enemy
  (if (or (in-zone? depo) (in-zone? safe))
      (check-depo $4)
      (check-rosette $1 $5)
      add
   else
      (if (piece? $3)
          mark
          z2
          afree
          (while (and (not-position? offboard) not-empty?)
              afree
          )
          (verify (not-position? offboard) )
          (create $1 $2)
          back
          (check-rosette $1 $5)
          add
       else
          (verify empty?)
          (check-rosette $1 $5)
          add
      )
  )
)
 
(define check-enemy-promouted
  (if (or (in-zone? depo) (in-zone? safe))
      (check-depo $5)
      (check-rosette $1 $6)
      (add $3)
   else
      (if (piece? $4)
          mark
          z2
          afree
          (while (and (not-position? offboard) not-empty?)
               afree
          )
          (verify (not-position? offboard) )
          (create $1 $2)
          back
          (check-rosette $1 $6)
          (add $3)
       else
          (verify empty?)
          (check-rosette $1 $6)
          (add $3)
       )
  )
)

(define check-protect
  (if (in-zone? protect)
      (verify (and (not-piece? upromouted)
                   (not-piece? dpromouted) ) )
  )
)

(define step-1
  ( (check-lock $8)
    (check-1-dices)
    $1
    (check-protect)
    (check-end)
    mark
    (go from)
    (check-stack $7)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6 $7 $8)
     else
         back
         (check-enemy $2 $3 $5 $7 $8)
    )
  )
)

(define step-2
  ( (check-lock $8)
    (check-2-dices)
    $1 $1
    (check-protect)
    (check-end)
    mark
    (go from)
    (check-stack $7)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6 $7 $8)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6 $7 $8)
          else
              back
              (check-enemy $2 $3 $5 $7 $8)
         )
    )
  )
)

(define step-3
  ( (check-lock $8)
    (check-3-dices)
    $1 $1 $1
    (check-protect)
    (check-end)
    mark
    (go from)
    (check-stack $7)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6 $7 $8)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6 $7 $8)
          else
              $1
              (if (in-zone? promotion)
                   back
                   (check-enemy-promouted $2 $3 $4 $6 $7 $8)
               else
                   back
                   (check-enemy $2 $3 $5 $7 $8)
              )
         )
    )
  )
)

(define step-4
  ( (check-lock $8)
    (check-0-dices)
    $1 $1 $1 $1
    (check-protect)
    (check-end)
    mark
    (go from)
    (check-stack $7)
    (if (in-zone? promotion)
         back
         (check-enemy-promouted $2 $3 $4 $6 $7 $8)
     else
         $1
         (if (in-zone? promotion)
              back
              (check-enemy-promouted $2 $3 $4 $6 $7 $8)
          else
              $1
              (if (in-zone? promotion)
                   back
                   (check-enemy-promouted $2 $3 $4 $6 $7 $8)
               else
                   $1
                   (if (in-zone? promotion)
                        back
                        (check-enemy-promouted $2 $3 $4 $6 $7 $8)
                    else
                        back
                        (check-enemy $2 $3 $5 $7 $8)
                   )
              )
         )
    )
  )
)

(define board-defs
  (image "images/Ur/ur.bmp")
  (grid
     (start-rectangle -483 27 -422 99)
     (dimensions
         ("i/j/k/l/m/n/o/z/a/b/c/d/e/f/g/h/y/x" (67 0)) ; files
         ("4/3/2/1/0" (0 68)) ; ranks
     )    
  )
  (dummy offboard)
  (links afree (z2 a4) (a4 b4) (b4 c4) (c4 d4) (d4 e4) (e4 f4) (f4 g4) (g4 offboard) )
  (links bfree (z2 a0) (a0 b0) (b0 c0) (c0 d0) (d0 e0) (e0 f0) (f0 g0) (g0 offboard) )
  (links anext (a0 d1) (b0 d1) (c0 d1) (d0 d1) (e0 d1) (f0 d1) (g0 d1)
               (d1 c1) (c1 b1) (b1 a1) (a1 a2) (a2 b2) (b2 c2) (c2 d2) 
               (d2 e2) (e2 f2) (f2 g2) (g2 g1) (g1 h1) (h1 h2) (h2 h3)
               (h3 g3) (g3 g2)
  )
  (links cnext (h2 h3) (h3 g3) (g3 g2) (g2 f2) (f2 e2) (e2 d2) (d2 c2)
               (c2 b2) (b2 a2) (a2 z2) 
  )
  (links bnext (a4 d3) (b4 d3) (c4 d3) (d4 d3) (e4 d3) (f4 d3) (g4 d3) 
               (d3 c3) (c3 b3) (b3 a3) (a3 a2) (a2 b2) (b2 c2) (c2 d2) 
               (d2 e2) (e2 f2) (f2 g2) (g2 g3) (g3 h3) (h3 h2) (h2 h1) 
               (h1 g1) (g1 g2)
  )
  (links dnext (h2 h1) (h1 g1) (g1 g2) (g2 f2) (f2 e2) (e2 d2) (d2 c2)
               (c2 b2) (b2 a2) (a2 z2)
  )
  (links next  (x1 x2) (x2 x3) (x3 offboard) )
  (links up    (b1 i1) (i1 i2) (i2 i3) (i3 offboard)
               (d1 j1) (j1 j2) (j2 j3) (j3 offboard)
               (b3 k1) (k1 k2) (k2 k3) (k3 offboard)
               (d3 l1) (l1 l2) (l2 l3) (l3 offboard)
               (g2 m1) (m1 m2) (m2 m3) (m3 offboard)
               (c2 n1) (n1 n2) (n2 n3) (n3 offboard)
               (f2 o1) (o1 o2) (o2 o3) (o3 offboard)
  )
  (symmetry Up  (anext bnext) (cnext dnext) (afree bfree))
  (symmetry ?Up (anext bnext) (cnext dnext) (afree bfree))
  (zone
     (name dices)
     (players ?Dice)
     (positions x1 x2 x3)
  )
  (zone
     (name dices-lock)
     (players ?Dice)
     (positions x0)
  )
  (zone
     (name promotion)
     (players Down)
     (positions h1)
  )
  (zone
     (name promotion)
     (players ?Up Up)
     (positions h3)
  )
  (zone
     (name rosette)
     (players ?Up Up Down)
     (positions a1 a3 d2 g1 g3)
  )
  (zone
     (name end)
     (players ?Up Up Down)
     (positions z2)
  )
)

(define additional-zones
  (zone
     (name depo)
     (players ?Up Up Down)
     (positions b1 b3 d1 d3 g2)
  )
  (zone
     (name safe)
     (players ?Up Up Down)
     (positions c2 f2)
  )
  (zone
     (name protect)
     (players ?Up Up Down)
     (positions a2)
  )
)

(define additional-zones-simple
  (zone
     (name depo)
     (players ?Up Up Down)
     (positions offboard)
  )
  (zone
     (name safe)
     (players ?Up Up Down)
     (positions offboard)
  )
  (zone
     (name protect)
     (players ?Up Up Down)
     (positions offboard)
  )
)

(game
   (title "Ur")

   (description "Object: Carry out all 7 pieces across the board.\\
                 Move pieces using dices:\\
                 One white dice - One square

                 Two white dices - Two squares

                 Three white dices - Three squares

                 All black dices - Four squares\\
                 Some fields have special features:\\
                 a1, a3, d2, g1 and g3 - Allow to make an additional move

                 h1 and h3 - The promotion fields

                 b1, b3, d1, d3 and g2 - Allow to put the pieces on each other

                 c2 and f2 - These fields are safe

                 a2 - Therein can't capture the promouted pieces\\
                 Promouted pieces can't capture unpromouted and vice versa.")

   (history "This game has been found in the ruins of the Ur city in 1926.

             Used version of the rules was invented in 2011 by Dmitry Skyruk.")

   (strategy "Use special fields.")

   (option "animate captures" false)
   (option "animate drops" false)
   (option "show moves list" false)
   (option "pass turn" forced)
   (option "highlight goals" false)
   (option "prevent flipping" true)
   (option "recycle captures" true)

   (drop-sound "Audio/Dice_cup.wav")
   (move-sound "Audio/Clack.wav")
   (capture-sound "")

   (players ?Up Up Down ?Dice)

   (turn-order Down repeat 
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) Up
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) Down)

   (board (board-defs) (additional-zones))
   (board-setup
          (?Dice (wdice x3 off 2) (bdice x2 x1 off 1) (lock off 1) )
          (Up    (uinitial a4 b4 c4 d4 e4 f4 g4) )
          (Down  (dinitial a0 b0 c0 d0 e0 f0 g0) )
   )

   (piece
	  (name wdice)
          (image ?Dice "images/Ur/wdice.bmp")
          (drops (move-type drop-type) (drop-dice) )
   )
   (piece
	  (name bdice)
          (image ?Dice "images/Ur/bdice.bmp")
          (drops (move-type drop-type) (drop-dice) )
   )
   (piece
	  (name lock)
          (image ?Dice "images/Ur/invisible.bmp")
          (drops (move-type clear-type) (clear-dices) )
   )
   (piece
	  (name ulock)
          (image Up    "images/Ur/invisible.bmp")
   )
   (piece
	  (name dlock)
          (image Down  "images/Ur/invisible.bmp")
   )

   (piece
	  (name  uinitial)
          (image Up   "images/Ur/binit.bmp")
      (moves
          (step-1 anext Down dinitial upromouted dinitial dpromouted Up dlock)
          (step-2 anext Down dinitial upromouted dinitial dpromouted Up dlock)
          (step-3 anext Down dinitial upromouted dinitial dpromouted Up dlock)
          (step-4 anext Down dinitial upromouted dinitial dpromouted Up dlock)
      )
   )
   (piece
	  (name  upromouted)
          (image Up   "images/Ur/bprom.bmp")
      (moves
          (step-1 cnext Down dinitial upromouted dpromouted dpromouted Up dlock)
          (step-2 cnext Down dinitial upromouted dpromouted dpromouted Up dlock)
          (step-3 cnext Down dinitial upromouted dpromouted dpromouted Up dlock)
          (step-4 cnext Down dinitial upromouted dpromouted dpromouted Up dlock)
      )
   )
   (piece
	  (name  dinitial)
          (image Down "images/Ur/winit.bmp")
      (moves
          (step-1 anext Up uinitial dpromouted uinitial upromouted Up ulock)
          (step-2 anext Up uinitial dpromouted uinitial upromouted Up ulock)
          (step-3 anext Up uinitial dpromouted uinitial upromouted Up ulock)
          (step-4 anext Up uinitial dpromouted uinitial upromouted Up ulock)
      )
   )
   (piece
	  (name  dpromouted)
          (image Down "images/Ur/wprom.bmp")
      (moves
          (step-1 cnext Up uinitial dpromouted upromouted upromouted Up ulock)
          (step-2 cnext Up uinitial dpromouted upromouted upromouted Up ulock)
          (step-3 cnext Up uinitial dpromouted upromouted upromouted Up ulock)
          (step-4 cnext Up uinitial dpromouted upromouted upromouted Up ulock)
      )
   )
   (win-condition (Up Down) (and (pieces-remaining 0 uinitial) 
                                 (pieces-remaining 0 upromouted) 
                                 (pieces-remaining 0 dinitial)
                                 (pieces-remaining 0 dpromouted) ) )
)

(variant
   (title "Ur (Random opponent)")

   (turn-order Down repeat 
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) ?Up
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) Down)

   (board-setup
          (?Dice (wdice x3 off 2) (bdice x2 x1 off 1) (lock off 1) )
          (?Up   (uinitial a4 b4 c4 d4 e4 f4 g4) )
          (Down  (dinitial a0 b0 c0 d0 e0 f0 g0) )
   )

   (piece
	  (name ulock)
          (image ?Up   "images/Ur/invisible.bmp")
   )

   (piece
	  (name  uinitial)
          (image ?Up   "images/Ur/binit.bmp")
      (moves
          (step-1 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-2 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-3 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-4 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
      )
   )
   (piece
	  (name  upromouted)
          (image ?Up   "images/Ur/bprom.bmp")
      (moves
          (step-1 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-2 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-3 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-4 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
      )
   )
   (piece
	  (name  dinitial)
          (image Down "images/Ur/winit.bmp")
      (moves
          (step-1 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-2 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-3 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-4 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
      )
   )
   (piece
	  (name  dpromouted)
          (image Down "images/Ur/wprom.bmp")
      (moves
          (step-1 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-2 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-3 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-4 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
      )
   )
   (win-condition (?Up Down) (and (pieces-remaining 0 uinitial) 
                                  (pieces-remaining 0 upromouted) 
                                  (pieces-remaining 0 dinitial)
                                  (pieces-remaining 0 dpromouted) ) )
)

(variant
   (title "-")
)

(variant
   (title "Simple Ur")

   (description "Object: Carry out all 7 pieces across the board.\\
                 Move pieces using dices:\\
                 One white dice - One square

                 Two white dices - Two squares

                 Three white dices - Three squares

                 All black dices - Four squares\\
                 Some fields have special features:\\
                 a1, a3, d2, g1 and g3 - Allow to make an additional move

                 h1 and h3 - The promotion fields\\
                 Promouted pieces can't capture unpromouted and vice versa.")

   (board (board-defs) (additional-zones-simple))
)

(variant
   (title "Simple Ur (Random opponent)")

   (description "Object: Carry out all 7 pieces across the board.\\
                 Move pieces using dices:\\
                 One white dice - One square

                 Two white dices - Two squares

                 Three white dices - Three squares

                 All black dices - Four squares\\
                 Some fields have special features:\\
                 a1, a3, d2, g1 and g3 - Allow to make an additional move

                 h1 and h3 - The promotion fields\\
                 Promouted pieces can't capture unpromouted and vice versa.")

   (board (board-defs) (additional-zones-simple))

   (turn-order Down repeat 
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) ?Up
               (?Dice clear-type) (?Dice drop-type) (?Dice drop-type) (?Dice drop-type) Down)

   (board-setup
          (?Dice (wdice x3 off 2) (bdice x2 x1 off 1) (lock off 1) )
          (?Up   (uinitial a4 b4 c4 d4 e4 f4 g4) )
          (Down  (dinitial a0 b0 c0 d0 e0 f0 g0) )
   )

   (piece
	  (name ulock)
          (image ?Up   "images/Ur/invisible.bmp")
   )

   (piece
	  (name  uinitial)
          (image ?Up   "images/Ur/binit.bmp")
      (moves
          (step-1 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-2 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-3 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
          (step-4 anext Down dinitial upromouted dinitial dpromouted ?Up dlock)
      )
   )
   (piece
	  (name  upromouted)
          (image ?Up   "images/Ur/bprom.bmp")
      (moves
          (step-1 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-2 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-3 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
          (step-4 cnext Down dinitial upromouted dpromouted dpromouted ?Up dlock)
      )
   )
   (piece
	  (name  dinitial)
          (image Down "images/Ur/winit.bmp")
      (moves
          (step-1 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-2 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-3 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
          (step-4 anext ?Up uinitial dpromouted uinitial upromouted ?Up ulock)
      )
   )
   (piece
	  (name  dpromouted)
          (image Down "images/Ur/wprom.bmp")
      (moves
          (step-1 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-2 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-3 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
          (step-4 cnext ?Up uinitial dpromouted upromouted upromouted ?Up ulock)
      )
   )
   (win-condition (?Up Down) (and (pieces-remaining 0 uinitial) 
                                  (pieces-remaining 0 upromouted) 
                                  (pieces-remaining 0 dinitial)
                                  (pieces-remaining 0 dpromouted) ) )
)
