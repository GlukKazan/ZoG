(define set-engaged
   (if (flag? is-light-engaged?)
       (set-flag is-heavy-engaged? true)
    else
       (set-flag is-light-engaged? true)
   )
)

(define check-escape
   (if (or enemy? (piece? Mount))
       (set-flag is-escaped? true)
   )
)

(define check-other
   mark
   (set-flag is-escaped? false)
   (if (on-board? $1)
       $1 (check-escape)
       (if (and friend? (not-in-zone? water) (or (piece? Rabble) (piece? LightHorse) (piece? HeavyHorse) (piece? Elephant) (piece? Crossbow) (piece? Dragon) (piece? Tower) (piece? King)))
           (set-engaged)
           (if (or (piece? HeavyHorse) (piece? Elephant) (piece? Dragon) (piece? Tower))
               (set-flag is-heavy-engaged? true)
           )
           (if (piece? Tower)
               (set-flag is-enemy-tower? true)
           )
       )
   )
   (if (and (on-board? $1) (not-flag? is-escaped?))
       $1 (check-escape)
       (if (and friend? (not-in-zone? water) (or (piece? Elephant) (piece? Crossbow) (piece? Trebuchet) (piece? Dragon)))
           (set-engaged)
           (if (or (piece? Elephant) (piece? Dragon))
               (set-flag is-heavy-engaged? true)
           )
       )
   )
   (if (and (on-board? $1) (not-flag? is-escaped?))
       $1 (check-escape)
       (if (and friend? (not-in-zone? water) (or (piece? Crossbow) (piece? Trebuchet)))
           (set-engaged)
       )
   )
   (if (and (on-board? $1) (not-flag? is-escaped?))
       $1 (check-escape)
       (if (and friend? (not-in-zone? water) (piece? Trebuchet))
           (set-engaged)
       )
   )
   back
)

(define check-spears
   (if (on-board? $1)
       (if (and (friend? $1) (not-in-zone? water $1) (piece? Spears $1))
           (set-engaged)
       )
   )
)

(define check-friend-tower
   (if (on-board? $1)
       (if (and (enemy? $1) (piece? Spears $1))
           (set-flag is-light-engaged? false)
       )
   )
)

(define check-engaged
   (verify (not-piece? Mount))
   (set-flag is-enemy-tower? false)
   (set-flag is-light-engaged? false)
   (set-flag is-heavy-engaged? true)
   (if (or (piece? Crossbow) (piece? Trebuchet))
       (set-flag is-light-engaged? true)
   )
   (if (or (piece? HeavyHorse) (piece? Elephant) (piece? Dragon) (piece? Tower))
       (set-flag is-heavy-engaged? false)
   )
   (check-spears sw) (check-spears se)
   (check-other w) (check-other e) (check-other nw) (check-other ne) (check-other sw) (check-other se)
   (if (not-flag? is-enemy-tower?)
       (check-friend-tower w) (check-friend-tower e) (check-friend-tower nw) (check-friend-tower ne) (check-friend-tower sw) (check-friend-tower se)
   )
   (verify (and (flag? is-light-engaged?) (flag? is-heavy-engaged?)))
)

(define move-1 (
  $1 (verify (or empty? (piece? Point))) add
))

(define check-target
  (if (position-flag? is-target?)
      (set-flag is-succeed? true)
  )
)

(define check-target-dir
  (if (and (on-board? $1)(position-flag? is-target? $1))
      (set-flag is-succeed? true)
  )
)

(define not-speared?
  (and (or (not-on-board? nw) (not-enemy? nw) (not-piece? Spears nw))
       (or (not-on-board? ne) (not-enemy? ne) (not-piece? Spears ne)))
)

(define check-dir-2
  (if (on-board? $1)
     $1 
     (if (not (or enemy? (piece? Mount)))
         (check-target)
     )
     (opposite $1)
  )
)

(define check-dir-3
  (if (on-board? $1)
     $1 
     (if (not (or enemy? (piece? Mount)))
         (check-target)
         (if (not-speared?)
             (check-target-dir $2)
             (check-target-dir $3)
             (check-target-dir $4)
         )
     )
     (opposite $1)
  )
)

(define check-target-dir-4
  (if (on-board? $1)
     $1 
     (check-target)
     (check-target-dir w)
     (check-target-dir e)
     (check-target-dir nw)
     (check-target-dir ne)
     (check-target-dir sw)
     (check-target-dir se)
     (opposite $1)
  )
)

(define check-dir-4
  (if (on-board? $1)
     $1 
     (check-target)
     (check-target-dir-4 $2)
     (check-target-dir-4 $3)
     (check-target-dir-4 $4)
     (opposite $1)
  )
)

(define check-branch-2
  mark
  (if (on-board? $1)
     $1 
     (if (not (or enemy? (piece? Mount)))
         (check-target)
         (if (not-speared?)
             (check-dir-2 $1)
             (check-dir-2 $2)
             (check-dir-2 $3)
         )
     )
  )
  back
)

(define check-branch-3
  mark
  (if (on-board? $1)
     $1 
     (if (not (or enemy? (piece? Mount)))
         (check-target)
         (if (not-speared?)
             (check-dir-3 $1 $1 $2 $3)
             (check-dir-3 $2 $1 $2 $4)
             (check-dir-3 $3 $1 $2 $5)
         )
     )
  )
  back
)

(define check-branch-4
  mark
  (if (on-board? $1)
     $1 
     (check-target)
     (check-dir-4 $1 $1 $2 $3)
     (check-dir-4 $2 $1 $2 $3)
     (check-dir-4 $3 $1 $2 $3)
  )
  back
)

(define move-2 (
  (set-position-flag is-target? true)
  START
  (while (on-board? next)
     next
     (set-flag is-succeed? false)
     (if (or empty? (piece? Point))
         (check-branch-2 w sw nw)
         (check-branch-2 nw w ne)
         (check-branch-2 ne nw e)
         (check-branch-2 e ne se)
         (check-branch-2 se e sw)
         (check-branch-2 sw se w)
         (if (flag? is-succeed?) add)
     )
  )
))

(define move-3 (
  (set-position-flag is-target? true)
  START
  (while (on-board? next)
     next
     (set-flag is-succeed? false)
     (if (or empty? (piece? Point))
         (check-branch-3 w sw nw se ne)
         (check-branch-3 nw w ne se e)
         (check-branch-3 ne nw e w se)
         (check-branch-3 e ne se nw sw)
         (check-branch-3 se e sw ne w)
         (check-branch-3 sw se w e nw)
         (if (flag? is-succeed?) add)
     )
  )
))

(define move-4 (
  (set-position-flag is-target? true)
  START
  (while (on-board? next)
     next
     (set-flag is-succeed? false)
     (check-branch-4 w sw nw)
     (check-branch-4 nw w ne)
     (check-branch-4 ne nw e)
     (check-branch-4 e ne se)
     (check-branch-4 se e sw)
     (check-branch-4 sw se w)
     (if (and (flag? is-succeed?) (or empty? (piece? Point))) add)
  )
))

(define horse-1 (
  $1 (verify enemy?)
  (check-engaged)
  add
))

(define horse-2 (
  (set-flag is-captured? false)
  $1 (verify (not-piece? Mount))
  (if enemy?
     (set-flag is-captured? true)
     (check-engaged)
     capture
  )
  $1 (verify not-friend?)
  (if enemy?
     (verify (not-flag? is-captured?))
     (check-engaged)
  )
  add
))

(define horse-3 (
  (set-flag is-captured? false)
  $1 (verify (not-piece? Mount))
  (if enemy?
     (set-flag is-captured? true)
     (check-engaged)
     capture
  )
  $1 (verify (not-piece? Mount))
  (if enemy?
     (verify (not-flag? is-captured?))
     (set-flag is-captured? true)
     (check-engaged)
     capture
  )
  $1 (verify not-friend?)
  (if enemy?
     (verify (not-flag? is-captured?))
     (check-engaged)
  )
  add
))

(define drop-point (
   (verify (in-zone? goal))
   add
))

(define board-def
   (image "../images/Cyvasse/$1.bmp")
   (grid
     (start-rectangle 110 9 160 59)
     (dimensions
         ("a/b/c/d/e/f/g/h/i/j/k/l" (50 0))
         ("1/2/3/4/5/6/7/8/9" (-25 50))
     )
     (directions (se 1 1) (w -1 0) (sw 0 1)
                 (nw -1 -1) (e 1 0) (ne 0 -1)
                 (next 1 0)
     )
   )
   (dummy START)
   (links next
      (START e9) (l9 d8) (l8 c7) (l7 b6) (l6 a5) 
      (l5 a4) (k4 a3) (j3 a2) (i2 a1)
   )
   (symmetry Black (nw sw) (sw nw) (ne se) (se ne))
   (kill-positions
         b9 c9 d9 a8 b8 c8 a7 b7 a6
      i1 j1 k1 l1 j2 k2 l2 k3 l3 l4
   )
)

(game
   (title "Nine-Tile Cyvasse")

   (option "prevent flipping" true)
   (animate-captures false)
   (animate-drops false)

   (move-sound "Audio\Pickup.wav")
   (release-sound "Audio\Pickup.wav")
   (capture-sound "")
   (drop-sound "")

   (players White Black)
   (turn-order White Black)

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
   )

   (piece
      (name Mount)
      (image White "../images/Cyvasse/mount.bmp"
             Black "../images/Cyvasse/mount.bmp")
   )

   (piece
      (name King)
      (image White "../images/Cyvasse/wking.bmp"
             Black "../images/Cyvasse/bking.bmp")
      (moves
         (move-1 nw) (move-1 ne) (move-1 sw) (move-1 se) (move-1 w) (move-1 e)
      )
   )
   (piece
      (name Rabble)
      (image White "../images/Cyvasse/wrabble.bmp"
             Black "../images/Cyvasse/brabble.bmp")
      (moves
         (move-1 nw) (move-1 ne) (move-1 sw) (move-1 se) (move-1 w) (move-1 e)
      )
   )
   (piece
      (name Spears)
      (image White "../images/Cyvasse/wspears.bmp"
             Black "../images/Cyvasse/bspears.bmp")
      (moves
         (move-1 nw) (move-1 ne)
      )
   )
   (piece
      (name LightHorse)
      (image White "../images/Cyvasse/wlighth.bmp"
             Black "../images/Cyvasse/blighth.bmp")
      (moves
         (move-3)
         (horse-1 w) (horse-1 e) (horse-1 nw) (horse-1 ne) (horse-1 sw) (horse-1 se)
         (horse-2 w) (horse-2 e) (horse-2 nw) (horse-2 ne) (horse-2 sw) (horse-2 se)
         (horse-3 w) (horse-3 e) (horse-3 nw) (horse-3 ne) (horse-3 sw) (horse-3 se)
      )
   )
   (piece
      (name HeavyHorse)
      (image White "../images/Cyvasse/wheavyh.bmp"
             Black "../images/Cyvasse/bheavyh.bmp")
      (moves
         (move-2)
         (horse-1 w) (horse-1 e) (horse-1 nw) (horse-1 ne) (horse-1 sw) (horse-1 se)
         (horse-2 w) (horse-2 e) (horse-2 nw) (horse-2 ne) (horse-2 sw) (horse-2 se)
      )
   )
   (piece
      (name Elephant)
      (image White "../images/Cyvasse/weleph.bmp"
             Black "../images/Cyvasse/beleph.bmp")
      (moves
         (move-1 nw) (move-1 ne) (move-1 sw) (move-1 se) (move-1 w) (move-1 e)
      )
   )
   (piece
      (name Crossbow)
      (image White "../images/Cyvasse/wcrossb.bmp"
             Black "../images/Cyvasse/bcrossb.bmp")
      (moves
         (move-2)
      )
   )
   (piece
      (name Trebuchet)
      (image White "../images/Cyvasse/wtrebuch.bmp"
             Black "../images/Cyvasse/btrebuch.bmp")
      (moves
         (move-1 nw) (move-1 ne) (move-1 sw) (move-1 se) (move-1 w) (move-1 e)
      )
   )
   (piece
      (name Dragon)
      (image White "../images/Cyvasse/wdragon.bmp"
             Black "../images/Cyvasse/bdragon.bmp")
      (moves
         (move-4)
      )
   )
   (piece
      (name Tower)
      (image White "../images/Cyvasse/wtower.bmp"
             Black "../images/Cyvasse/btower.bmp")
   )
   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
   )

   (board-setup
      (White
         (King l9)
      )
      (Black
         (King a1)
      )
   )
)

(variant
   (title "-")
)

(variant
   (title "Lesson 1")
   (description "3 moves")

   (turn-order White White White (Black goal-type))

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
      (drops
         (move-type goal-type)
         (drop-point)
      )
   )

   (board-setup
      (White
         (Rabble f6)
         (Point g4)
      )
      (Black
         (Point off 1)
      )
   )

   (win-condition (White) (pieces-remaining 0 Point))
   (win-condition (Black) (pieces-remaining 1 Point))
)

(variant
   (title "Lesson 2")
   (description "3 moves")

   (turn-order White White White (Black goal-type))

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
      (drops
         (move-type goal-type)
         (drop-point)
      )
   )

   (board-setup
      (White
         (LightHorse f7)
         (Tower f2 i4 i6 k7)
         (Mount g6 d7 h7 j7 l7 f9 h9 j9 l9)
         (Point j3)
      )
      (Black
         (Tower h2 g4 k5)
         (Mount b1 d1 f1 h1 b3 d3 f3 h3 b5 d5 f5 h5 j5 l5)
         (Point off 1)
      )
   )

   (win-condition (White) (pieces-remaining 0 Point))
   (win-condition (Black) (pieces-remaining 1 Point))
)

(variant
   (title "Lesson 3")
   (description "8 moves")
   (default)

   (turn-order White White White White White White White White (Black goal-type))

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
      (drops
         (move-type goal-type)
         (drop-point)
      )
   )

   (board-setup
      (White
         (Dragon g5)
      )
      (Black
         (Crossbow h2 e2 h4 f8 f6 i8)
         (Point off 1)
      )
   )

   (loss-condition (Black) (pieces-remaining 0))
   (win-condition (Black) (pieces-remaining 1 Point))
)

(variant
   (title "Lesson 4")
   (description "4 moves")

   (turn-order White White White White (Black goal-type))

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
      (drops
         (move-type goal-type)
         (drop-point)
      )
   )

   (board-setup
      (White
         (LightHorse e6)
      )
      (Black
         (Rabble f6 i6 h5 e3)
         (Point off 1)
      )
   )

   (loss-condition (Black) (pieces-remaining 0))
   (win-condition (Black) (pieces-remaining 1 Point))
)

(variant
   (title "Lesson 5")
   (description "4 moves")

   (turn-order White White White White (Black goal-type))

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (piece
      (name Point)
      (image White "../images/Cyvasse/point.bmp"
             Black "../images/Cyvasse/point.bmp")
      (drops
         (move-type goal-type)
         (drop-point)
      )
   )

   (board-setup
      (White
         (LightHorse h8)
         (Crossbow i6)
      )
      (Black
         (Rabble h6 h4 e4)
         (Point off 1)
      )
   )

   (loss-condition (Black) (pieces-remaining 0))
   (win-condition (Black) (pieces-remaining 1 Point))
)

(variant
   (title "Lesson 6")
   (description "3 moves")

   (turn-order White)

   (board
      (board-def lesson-6)
      (zone (name water) (players White Black)
            (positions e3 f3 e4 f4 e5)
      )
   )

   (board-setup
      (White
         (LightHorse h6)
         (Crossbow e6 h4)
      )
      (Black
         (Tower g5 e3)
      )
   )
)

(variant
   (title "Lesson 7")
   (description "5 moves")

   (turn-order White)

   (board
      (board-def lesson-7)
      (zone (name water) (players White Black)
            (positions e6)
      )
   )

   (board-setup
      (White
         (Rabble f7)
         (Crossbow f3 h6)
      )
      (Black
         (Tower e6 f6 e5 f5)
         (Mount e4 f4)
      )
   )
)

(variant
   (title "Lesson 8")
   (description "6 moves")

   (turn-order White)

   (board
      (board-def board)
      (zone (name water) (players White Black)
            (positions START)
      )
      (zone (name goal) (players Black)
            (positions a9)
      )
   )

   (board-setup
      (White
         (Spears h4 g6)
         (LightHorse f5)
         (Crossbow d6)
      )
      (Black
         (Spears d3 f3 g3 h5)
      )
   )
)

(variant
   (title "Lesson 9")
   (description "7 moves")

   (turn-order White)

   (board
      (board-def lesson-9)
      (zone (name water) (players White Black)
            (positions g5)
      )
   )

   (board-setup
      (White
         (LightHorse e7)
         (Elephant h7)
         (Trebuchet h6)
         (Tower g7)
         (King g6)
      )
      (Black
         (Rabble e5 f5 h5)
         (Spears e3 f3)
         (Tower d3 g3)
         (King e2)
         (Mount d1 e1)
      )
   )
)
