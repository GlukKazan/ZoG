(define am-i-red?
   (in-zone? player-id A1)
)

(define step
   (if (flag? is-up?)
       (if (on-board? $1) $1 else (set-flag is-up? false) $2)
    else
       (if (on-board? $2) $2 else (set-flag is-up? true) $1)
   )
)

(define clear
   (set-flag $1-8 false) (set-flag $1-4 false)
   (set-flag $1-2 false) (set-flag $1-1 false)
)

(define inc
   (if (flag? $1-1)
       (set-flag $1-1 false)
       (if (flag? $1-2)
           (set-flag $1-2 false)
           (if (flag? $1-4)
               (set-flag $1-4 false)
               (if (flag? $1-8)
                   (set-flag $1-8 false)
                else
                   (set-flag $1-8 true)
               )
            else
               (set-flag $1-4 true)
           )
        else
           (set-flag $1-2 true)
       )
    else
       (set-flag $1-1 true)
   )
)

(define dec
   (if (not-flag? $1-1)
       (set-flag $1-1 true)
       (if (not-flag? $1-2)
           (set-flag $1-2 true)
           (if (not-flag? $1-4)
               (set-flag $1-4 true)
               (if (not-flag? $1-8)
                   (set-flag $1-8 true)
                else
                   (set-flag $1-8 false)
               )
            else
               (set-flag $1-4 false)
           )
        else
           (set-flag $1-2 false)
       )
    else
       (set-flag $1-1 false)
   )
)

(define not-10?
   (or (not-flag? $1-8)
       (flag? $1-4)
       (not-flag? $1-2)
       (flag? $1-1)
   )
)

(define not-0?
  (or (flag? $1-8)
      (flag? $1-4)
      (flag? $1-2)
      (flag? $1-1)
  )
)

(define is-0?
  (and (not-flag? $1-8)
       (not-flag? $1-4)
       (not-flag? $1-2)
       (not-flag? $1-1)
  )
)

(define is-1?
  (and (not-flag? $1-8)
       (not-flag? $1-4)
       (not-flag? $1-2)
       (flag? $1-1)
  )
)

(define is-2?
  (and (not-flag? $1-8)
       (not-flag? $1-4)
       (flag? $1-2)
       (not-flag? $1-1)
  )
)

(define is-3?
  (and (not-flag? $1-8)
       (not-flag? $1-4)
       (flag? $1-2)
       (flag? $1-1)
  )
)

(define calc
   (clear $1)
   mark ST
   (while (on-board? next) 
      next
      (if friend?
          (inc $1)
      )
   )
   back
)

(define init
   (clear $1)
   (if (or (piece? p1) (piece? p3) (piece? p5))
       (set-flag $1-1 true)
   )
   (if (or (piece? p2) (piece? p3) (piece? p6))
       (set-flag $1-2 true)
   )
   (if (or (piece? p4) (piece? p5) (piece? p6))
       (set-flag $1-4 true)
   )
)

(define sum
   (while (not-0? $2)
       (inc $1)
       (dec $2)
   )
)

(define try-alloc
   (if (is-0? x)
       (inc y)
    else
       (dec x)
   )
)

(define set-piece
   (if (am-i-red?)
       (create White $1)
    else
       (create Red $1)
   )
)

(define alloc-to
   (clear y)
   (if (piece? p1)
       (try-alloc) (try-alloc) (try-alloc) (try-alloc) (try-alloc)
   )
   (if (piece? p2)
       (try-alloc) (try-alloc) (try-alloc) (try-alloc)
   )
   (if (piece? p3)
       (try-alloc) (try-alloc) (try-alloc)
   )
   (if (piece? p4)
       (try-alloc) (try-alloc)
   )
   (if (piece? p5)
       (try-alloc)
   )
   (if (is-0? y)
       (set-piece p6)
    else
       (if (is-1? y)
           (set-piece p5)
        else
           (if (is-2? y)
               (set-piece p4)
            else
               (if (is-3? y)
                   (set-piece p3)
                else
                   (set-piece p2)
               )
           )
       )
   )
)

(define alloc
   (if (not-0? x)
       mark ST
       (while (on-board? next) 
           next
           (if (and enemy? (piece? $1) (not-0? x) 
                    (not-position-flag? is-captured?))
               (alloc-to)
           )
       )
       back
   )
)

(define alloc-all
   (alloc p1) (alloc p2) (alloc p3) (alloc p4) (alloc p5)
)

(define my-empty?
   (and empty? (not-in-zone? chamber))
)

(define common-slide
   (while (and friend? (not-position-flag? is-from?))
       cascade
       (step $1 $2)
   )
   (verify (not-in-zone? chamber))
   (if enemy?
       (set-position-flag is-captured? true)
       (init x) 
       (alloc-all)
   )
   add
)

(define slide-1 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2)
   (common-slide $1 $2)
))

(define slide-2 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) 
   (common-slide $1 $2)
))

(define slide-3 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) 
   (common-slide $1 $2)
))

(define slide-4 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) 
   (common-slide $1 $2)
))

(define slide-5 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) 
   (common-slide $1 $2)
))

(define slide-6 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) 
   (common-slide $1 $2)
))

(define exchange-1 (
   (create $2) $1 
   (verify friend?)
   (verify (not-piece? p6))
   (if (piece? p1) (create p2))
   (if (piece? p2) (create p3))
   (if (piece? p3) (create p4))
   (if (piece? p4) (create p5))
   (if (piece? p5) (create p6))
   add
))

(define exchange-2 (
   (create $2) $1 
   (verify friend?)
   (verify (not-piece? p6))
   (verify (not-piece? p5))
   (if (piece? p1) (create p3))
   (if (piece? p2) (create p4))
   (if (piece? p3) (create p5))
   (if (piece? p4) (create p6))
   add
))

(define exchange-3 (
   (create $2) $1 
   (verify friend?)
   (verify (not-piece? p6))
   (verify (not-piece? p5))
   (verify (not-piece? p4))
   (if (piece? p1) (create p4))
   (if (piece? p2) (create p5))
   (if (piece? p3) (create p6))
   add
))

(define exchange-4 (
   (create $2) $1 
   (verify friend?)
   (verify (not-piece? p6))
   (verify (not-piece? p5))
   (verify (not-piece? p4))
   (verify (not-piece? p3))
   (if (piece? p1) (create p5))
   (if (piece? p2) (create p6))
   add
))

(define exchange-5 (
   (create $2) $1 
   (verify friend?)
   (verify (piece? p1))
   (create p6)
   add
))

(define common-turn
  (step $2 $3)
  (create $1)
  (while (and friend? (not-position-flag? is-from?))
      cascade from
      (step $2 $3)
      to
  )
  (if enemy?
      (set-position-flag is-captured? true)
      (init y)
      (sum x y)
  )
)

(define common-split
   (verify (in-zone? chamber))
   to capture
   (calc x)
   (if (not-10? x)
       (clear x)
       (if (flag? is-up?)
           (common-turn $1 $2 $3)
        else
           (common-turn $1 $5 $6)
       ) E5
       (if (flag? is-up?)
           (common-turn $4 $5 $6)
        else
           (common-turn $4 $2 $3)
       )
       (alloc-all)
    else
       (clear x)
       (if (flag? is-up?)
           (common-turn $7 $2 $3)
        else
           (common-turn $7 $5 $6)
       )
       (alloc-all)
   )
   add
)

(define split-1 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2)
   (verify (in-zone? chamber))
   capture
   (clear x)
   (if (flag? is-up?)
       (common-turn $3 $4 $5)
    else
       (common-turn $3 $6 $7)
   )
   (alloc-all)
   E5 add
))

(define split-2 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (common-split $3 $4 $5 $6 $7 $8 $9)
))

(define split-3 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (common-split $3 $4 $5 $6 $7 $8 $9)
))

(define split-4 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (common-split $3 $4 $5 $6 $7 $8 $9)
))

(define split-5 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (common-split $3 $4 $5 $6 $7 $8 $9)
))

(define split-6 (
   (set-flag is-up? true)
   (set-position-flag is-from? true)
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (verify (my-empty?))
   (step $1 $2) (common-split $3 $4 $5 $6 $7 $8 $9)
))

(game
   (title "Chase")

   (option "prevent flipping" true)
   (option "pass partial" true)
   (animate-captures false)

   (move-sound "Audio/Pickup.wav")
   (release-sound "Audio/Pickup.wav")
   (capture-sound "")
   (drop-sound "")

   (players Red White)
   (turn-order Red White)

   (board
      (image "../Images/Chase/board.bmp")
      (positions  
             (I1 48  33  108 83)
             (I2 108 33  168 83)
             (I3 168 33  228 83)
             (I4 228 33  288 83)
             (I5 288 33  348 83)
             (I6 348 33  408 83)
             (I7 408 33  468 83)
             (I8 468 33  528 83)
             (I9 528 33  588 83)

             (H1 18  84  78  134)
             (H2 78  84  138 134)
             (H3 138 84  198 134)
             (H4 198 84  258 134)
             (H5 258 84  318 134)
             (H6 318 84  378 134)
             (H7 378 84  438 134)
             (H8 438 84  498 134)
             (H9 498 84  558 134)

             (G1 48  136 108 186)
             (G2 108 136 168 186)
             (G3 168 136 228 186)
             (G4 228 136 288 186)
             (G5 288 136 348 186)
             (G6 348 136 408 186)
             (G7 408 136 468 186)
             (G8 468 136 528 186)
             (G9 528 136 588 186)

             (F1 18  188 78  238)
             (F2 78  188 138 238)
             (F3 138 188 198 238)
             (F4 198 188 258 238)
             (F5 258 188 318 238)
             (F6 318 188 378 238)
             (F7 378 188 438 238)
             (F8 438 188 498 238)
             (F9 498 188 558 238)

             (E1 48  240 108 290)
             (E2 108 240 168 290)
             (E3 168 240 228 290)
             (E4 228 240 288 290)
             (E5 288 240 348 290)
             (E6 348 240 408 290)
             (E7 408 240 468 290)
             (E8 468 240 528 290)
             (E9 528 240 588 290)

             (D1 18  292 78  342)
             (D2 78  292 138 342)
             (D3 138 292 198 342)
             (D4 198 292 258 342)
             (D5 258 292 318 342)
             (D6 318 292 378 342)
             (D7 378 292 438 342)
             (D8 438 292 498 342)
             (D9 498 292 558 342)

             (C1 48  344 108 394)
             (C2 108 344 168 394)
             (C3 168 344 228 394)
             (C4 228 344 288 394)
             (C5 288 344 348 394)
             (C6 348 344 408 394)
             (C7 408 344 468 394)
             (C8 468 344 528 394)
             (C9 528 344 588 394)

             (B1 18  396 78  446)
             (B2 78  396 138 446)
             (B3 138 396 198 446)
             (B4 198 396 258 446)
             (B5 258 396 318 446)
             (B6 318 396 378 446)
             (B7 378 396 438 446)
             (B8 438 396 498 446)
             (B9 498 396 558 446)

             (A1 48  447 108 497)
             (A2 108 447 168 497)
             (A3 168 447 228 497)
             (A4 228 447 288 497)
             (A5 288 447 348 497)
             (A6 348 447 408 497)
             (A7 408 447 468 497)
             (A8 468 447 528 497)
             (A9 528 447 588 497)
      )
      (dummy ST)
      (links next
         (ST A1) (A1 A2) (A2 A3) (A3 A4) (A4 A5) (A5 A6) (A6 A7) (A7 A8) (A8 A9) 
         (A9 B1) (B1 B2) (B2 B3) (B3 B4) (B4 B5) (B5 B6) (B6 B7) (B7 B8) (B8 B9)
         (B9 C1) (C1 C2) (C2 C3) (C3 C4) (C4 C5) (C5 C6) (C6 C7) (C7 C8) (C8 C9) 
         (C9 D1) (D1 D2) (D2 D3) (D3 D4) (D4 D5) (D5 D6) (D6 D7) (D7 D8) (D8 D9) 
         (D9 E1) (E1 E2) (E2 E3) (E3 E4) (E4 E5) (E5 E6) (E6 E7) (E7 E8) (E8 E9) 
         (E9 F1) (F1 F2) (F2 F3) (F3 F4) (F4 F5) (F5 F6) (F6 F7) (F7 F8) (F8 F9) 
         (F9 G1) (G1 G2) (G2 G3) (G3 G4) (G4 G5) (G5 G6) (G6 G7) (G7 G8) (G8 G9) 
         (G9 H1) (H1 H2) (H2 H3) (H3 H4) (H4 H5) (H5 H6) (H6 H7) (H7 H8) (H8 H9) 
         (H9 I1) (I1 I2) (I2 I3) (I3 I4) (I4 I5) (I5 I6) (I6 I7) (I7 I8) (I8 I9)
      )
      (links w
         (A1 A9) (A2 A1) (A3 A2) (A4 A3) (A5 A4) (A6 A5) (A7 A6) (A8 A7) (A9 A8) 
         (B1 B9) (B2 B1) (B3 B2) (B4 B3) (B5 B4) (B6 B5) (B7 B6) (B8 B7) (B9 B8) 
         (C1 C9) (C2 C1) (C3 C2) (C4 C3) (C5 C4) (C6 C5) (C7 C6) (C8 C7) (C9 C8) 
         (D1 D9) (D2 D1) (D3 D2) (D4 D3) (D5 D4) (D6 D5) (D7 D6) (D8 D7) (D9 D8) 
         (E1 E9) (E2 E1) (E3 E2) (E4 E3) (E5 E4) (E6 E5) (E7 E6) (E8 E7) (E9 E8) 
         (F1 F9) (F2 F1) (F3 F2) (F4 F3) (F5 F4) (F6 F5) (F7 F6) (F8 F7) (F9 F8) 
         (G1 G9) (G2 G1) (G3 G2) (G4 G3) (G5 G4) (G6 G5) (G7 G6) (G8 G7) (G9 G8) 
         (H1 H9) (H2 H1) (H3 H2) (H4 H3) (H5 H4) (H6 H5) (H7 H6) (H8 H7) (H9 H8) 
         (I1 I9) (I2 I1) (I3 I2) (I4 I3) (I5 I4) (I6 I5) (I7 I6) (I8 I7) (I9 I8)
      )
      (links e
         (A9 A1) (A1 A2) (A2 A3) (A3 A4) (A4 A5) (A5 A6) (A6 A7) (A7 A8) (A8 A9) 
         (B9 B1) (B1 B2) (B2 B3) (B3 B4) (B4 B5) (B5 B6) (B6 B7) (B7 B8) (B8 B9)
         (C9 C1) (C1 C2) (C2 C3) (C3 C4) (C4 C5) (C5 C6) (C6 C7) (C7 C8) (C8 C9) 
         (D9 D1) (D1 D2) (D2 D3) (D3 D4) (D4 D5) (D5 D6) (D6 D7) (D7 D8) (D8 D9) 
         (E9 E1) (E1 E2) (E2 E3) (E3 E4) (E4 E5) (E5 E6) (E6 E7) (E7 E8) (E8 E9) 
         (F9 F1) (F1 F2) (F2 F3) (F3 F4) (F4 F5) (F5 F6) (F6 F7) (F7 F8) (F8 F9) 
         (G9 G1) (G1 G2) (G2 G3) (G3 G4) (G4 G5) (G5 G6) (G6 G7) (G7 G8) (G8 G9) 
         (H9 H1) (H1 H2) (H2 H3) (H3 H4) (H4 H5) (H5 H6) (H6 H7) (H7 H8) (H8 H9) 
         (I9 I1) (I1 I2) (I2 I3) (I3 I4) (I4 I5) (I5 I6) (I6 I7) (I7 I8) (I8 I9)
      )
      (links nw
         (A1 B1) (A2 B2) (A3 B3) (A4 B4) (A5 B5) (A6 B6) (A7 B7) (A8 B8) (A9 B9) 
         (B1 C9) (B2 C1) (B3 C2) (B4 C3) (B5 C4) (B6 C5) (B7 C6) (B8 C7) (B9 C8) 
         (C1 D1) (C2 D2) (C3 D3) (C4 D4) (C5 D5) (C6 D6) (C7 D7) (C8 D8) (C9 D9) 
         (D1 E9) (D2 E1) (D3 E2) (D4 E3) (D5 E4) (D6 E5) (D7 E6) (D8 E7) (D9 E8) 
         (E1 F1) (E2 F2) (E3 F3) (E4 F4) (E5 F5) (E6 F6) (E7 F7) (E8 F8) (E9 F9) 
         (F1 G9) (F2 G1) (F3 G2) (F4 G3) (F5 G4) (F6 G5) (F7 G6) (F8 G7) (F9 G8) 
         (G1 H1) (G2 H2) (G3 H3) (G4 H4) (G5 H5) (G6 H6) (G7 H7) (G8 H8) (G9 H9) 
         (H1 I9) (H2 I1) (H3 I2) (H4 I3) (H5 I4) (H6 I5) (H7 I6) (H8 I7) (H9 I8)
      )
      (links ne
         (A1 B2) (A2 B3) (A3 B4) (A4 B5) (A5 B6) (A6 B7) (A7 B8) (A8 B9) (A9 B1) 
         (B1 C1) (B2 C2) (B3 C3) (B4 C4) (B5 C5) (B6 C6) (B7 C7) (B8 C8) (B9 C9) 
         (C1 D2) (C2 D3) (C3 D4) (C4 D5) (C5 D6) (C6 D7) (C7 D8) (C8 D9) (C9 D1) 
         (D1 E1) (D2 E2) (D3 E3) (D4 E4) (D5 E5) (D6 E6) (D7 E7) (D8 E8) (D9 E9) 
         (E1 F2) (E2 F3) (E3 F4) (E4 F5) (E5 F6) (E6 F7) (E7 F8) (E8 F9) (E9 F1) 
         (F1 G1) (F2 G2) (F3 G3) (F4 G4) (F5 G5) (F6 G6) (F7 G7) (F8 G8) (F9 G9) 
         (G1 H2) (G2 H3) (G3 H4) (G4 H5) (G5 H6) (G6 H7) (G7 H8) (G8 H9) (G9 H1) 
         (H1 I1) (H2 I2) (H3 I3) (H4 I4) (H5 I5) (H6 I6) (H7 I7) (H8 I8) (H9 I9)
      )
      (links sw
         (B2 A1) (B3 A2) (B4 A3) (B5 A4) (B6 A5) (B7 A6) (B8 A7) (B9 A8) (B1 A9) 
         (C1 B1) (C2 B2) (C3 B3) (C4 B4) (C5 B5) (C6 B6) (C7 B7) (C8 B8) (C9 B9) 
         (D2 C1) (D3 C2) (D4 C3) (D5 C4) (D6 C5) (D7 C6) (D8 C7) (D9 C8) (D1 C9) 
         (E1 D1) (E2 D2) (E3 D3) (E4 D4) (E5 D5) (E6 D6) (E7 D7) (E8 D8) (E9 D9) 
         (F2 E1) (F3 E2) (F4 E3) (F5 E4) (F6 E5) (F7 E6) (F8 E7) (F9 E8) (F1 E9) 
         (G1 F1) (G2 F2) (G3 F3) (G4 F4) (G5 F5) (G6 F6) (G7 F7) (G8 F8) (G9 F9)
         (H2 G1) (H3 G2) (H4 G3) (H5 G4) (H6 G5) (H7 G6) (H8 G7) (H9 G8) (H1 G9) 
         (I1 H1) (I2 H2) (I3 H3) (I4 H4) (I5 H5) (I6 H6) (I7 H7) (I8 H8) (I9 H9)
      )
      (links se
         (B1 A1) (B2 A2) (B3 A3) (B4 A4) (B5 A5) (B6 A6) (B7 A7) (B8 A8) (B9 A9) 
         (C9 B1) (C1 B2) (C2 B3) (C3 B4) (C4 B5) (C5 B6) (C6 B7) (C7 B8) (C8 B9) 
         (D1 C1) (D2 C2) (D3 C3) (D4 C4) (D5 C5) (D6 C6) (D7 C7) (D8 C8) (D9 C9) 
         (E9 D1) (E1 D2) (E2 D3) (E3 D4) (E4 D5) (E5 D6) (E6 D7) (E7 D8) (E8 D9) 
         (F1 E1) (F2 E2) (F3 E3) (F4 E4) (F5 E5) (F6 E6) (F7 E7) (F8 E8) (F9 E9) 
         (G9 F1) (G1 F2) (G2 F3) (G3 F4) (G4 F5) (G5 F6) (G6 F7) (G7 F8) (G8 F9) 
         (H1 G1) (H2 G2) (H3 G3) (H4 G4) (H5 G5) (H6 G6) (H7 G7) (H8 G8) (H9 G9) 
         (I9 H1) (I1 H2) (I2 H3) (I3 H4) (I4 H5) (I5 H6) (I6 H7) (I7 H8) (I8 H9)
      )
      (zone (name player-id) (players Red) (positions A1))
      (zone (name chamber) (players Red White) (positions E5))
   )

   (piece
      (name p1)
      (image Red   "../Images/Chase/d1r.bmp"
             White "../Images/Chase/d1w.bmp")
      (moves
         (slide-1 w w) (slide-1 nw sw) (slide-1 sw nw)
         (slide-1 e e) (slide-1 ne se) (slide-1 se ne)
         (split-1 ne se p1 w w se ne)
         (split-1 e e p1 nw sw sw nw)
         (split-1 se ne p1 ne se w w)
         (split-1 sw nw p1 e e nw sw)
         (split-1 w w p1 se ne ne se)
         (split-1 nw sw p1 sw nw e e)
      )
   )
   (piece
      (name p2)
      (image Red   "../Images/Chase/d2r.bmp"
             White "../Images/Chase/d2w.bmp")
      (moves
         (slide-2 w w) (slide-2 nw sw) (slide-2 sw nw)
         (slide-2 e e) (slide-2 ne se) (slide-2 se ne)
         (exchange-1 w p1) (exchange-1 nw p1) (exchange-1 sw p1)
         (exchange-1 e p1) (exchange-1 ne p1) (exchange-1 se p1)
         (split-2 ne se p1 w w p1 se ne p2)
         (split-2 e e p1 nw sw p1 sw nw p2)
         (split-2 se ne p1 ne se p1 w w p2)
         (split-2 sw nw p1 e e p1 nw sw p2)
         (split-2 w w p1 se ne p1 ne se p2)
         (split-2 nw sw p1 sw nw p1 e e p2)
      )
   )
   (piece
      (name p3)
      (image Red   "../Images/Chase/d3r.bmp"
             White "../Images/Chase/d3w.bmp")
      (moves
         (slide-3 w w) (slide-3 nw sw) (slide-3 sw nw)
         (slide-3 e e) (slide-3 ne se) (slide-3 se ne)
         (exchange-2 w p1) (exchange-2 nw p1) (exchange-2 sw p1)
         (exchange-2 e p1) (exchange-2 ne p1) (exchange-2 se p1)
         (exchange-1 w p2) (exchange-1 nw p2) (exchange-1 sw p2)
         (exchange-1 e p2) (exchange-1 ne p2) (exchange-1 se p2)
         (split-3 ne se p2 w w p1 se ne p3)
         (split-3 e e p2 nw sw p1 sw nw p3)
         (split-3 se ne p2 ne se p1 w w p3)
         (split-3 sw nw p2 e e p1 nw sw p3)
         (split-3 w w p2 se ne p1 ne se p3)
         (split-3 nw sw p2 sw nw p1 e e p3)
      )
   )
   (piece
      (name p4)
      (image Red   "../Images/Chase/d4r.bmp"
             White "../Images/Chase/d4w.bmp")
      (moves
         (slide-4 w w) (slide-4 nw sw) (slide-4 sw nw)
         (slide-4 e e) (slide-4 ne se) (slide-4 se ne)
         (exchange-3 w p1) (exchange-3 nw p1) (exchange-3 sw p1)
         (exchange-3 e p1) (exchange-3 ne p1) (exchange-3 se p1)
         (exchange-2 w p2) (exchange-2 nw p2) (exchange-2 sw p2)
         (exchange-2 e p2) (exchange-2 ne p2) (exchange-2 se p2)
         (exchange-1 w p3) (exchange-1 nw p3) (exchange-1 sw p3)
         (exchange-1 e p3) (exchange-1 ne p3) (exchange-1 se p3)
         (split-4 ne se p2 w w p2 se ne p4)
         (split-4 e e p2 nw sw p2 sw nw p4)
         (split-4 se ne p2 ne se p2 w w p4)
         (split-4 sw nw p2 e e p2 nw sw p4)
         (split-4 w w p2 se ne p2 ne se p4)
         (split-4 nw sw p2 sw nw p2 e e p4)
      )
   )
   (piece
      (name p5)
      (image Red   "../Images/Chase/d5r.bmp"
             White "../Images/Chase/d5w.bmp")
      (moves
         (slide-5 w w) (slide-5 nw sw) (slide-5 sw nw)
         (slide-5 e e) (slide-5 ne se) (slide-5 se ne)
         (exchange-4 w p1) (exchange-4 nw p1) (exchange-4 sw p1)
         (exchange-4 e p1) (exchange-4 ne p1) (exchange-4 se p1)
         (exchange-3 w p2) (exchange-3 nw p2) (exchange-3 sw p2)
         (exchange-3 e p2) (exchange-3 ne p2) (exchange-3 se p2)
         (exchange-2 w p3) (exchange-2 nw p3) (exchange-2 sw p3)
         (exchange-2 e p3) (exchange-2 ne p3) (exchange-2 se p3)
         (exchange-1 w p4) (exchange-1 nw p4) (exchange-1 sw p4)
         (exchange-1 e p4) (exchange-1 ne p4) (exchange-1 se p4)
         (split-5 ne se p3 w w p2 se ne p5)
         (split-5 e e p3 nw sw p2 sw nw p5)
         (split-5 se ne p3 ne se p2 w w p5)
         (split-5 sw nw p3 e e p2 nw sw p5)
         (split-5 w w p3 se ne p2 ne se p5)
         (split-5 nw sw p3 sw nw p2 e e p5)
      )
   )
   (piece
      (name p6)
      (image Red   "../Images/Chase/d6r.bmp"
             White "../Images/Chase/d6w.bmp")
      (moves
         (slide-6 w w) (slide-6 nw sw) (slide-6 sw nw)
         (slide-6 e e) (slide-6 ne se) (slide-6 se ne)
         (exchange-5 w p1) (exchange-5 nw p1) (exchange-5 sw p1)
         (exchange-5 e p1) (exchange-5 ne p1) (exchange-5 se p1)
         (exchange-4 w p2) (exchange-4 nw p2) (exchange-4 sw p2)
         (exchange-4 e p2) (exchange-4 ne p2) (exchange-4 se p2)
         (exchange-3 w p3) (exchange-3 nw p3) (exchange-3 sw p3)
         (exchange-3 e p3) (exchange-3 ne p3) (exchange-3 se p3)
         (exchange-2 w p4) (exchange-2 nw p4) (exchange-2 sw p4)
         (exchange-2 e p4) (exchange-2 ne p4) (exchange-2 se p4)
         (exchange-1 w p5) (exchange-1 nw p5) (exchange-1 sw p5)
         (exchange-1 e p5) (exchange-1 ne p5) (exchange-1 se p5)
         (split-6 ne se p3 w w p3 se ne p6)
         (split-6 e e p3 nw sw p3 sw nw p6)
         (split-6 se ne p3 ne se p3 w w p6)
         (split-6 sw nw p3 e e p3 nw sw p6)
         (split-6 w w p3 se ne p3 ne se p6)
         (split-6 nw sw p3 sw nw p3 e e p6)
      )
   )

   (board-setup
      (White 
         (p1 I1 I9)
         (p2 I2 I8)
         (p3 I3 I7)
         (p4 I4 I6)
         (p5 I5)
      )
      (Red   
         (p1 A1 A9)
         (p2 A2 A8)
         (p3 A3 A7)
         (p4 A4 A6)
         (p5 A5)
      )
   )
   
   (loss-condition (Red White) (pieces-remaining 4) )
   (loss-condition (Red White) (pieces-remaining 3) )
)
