(define drop-lock (
   (verify (in-zone? inner))
   (verify enemy?)
   (verify is-capturing?)
   capture
   mark a0 
   (while (on-board? next) 
        next
        (if (and enemy? is-capturing?)
            (set-attribute is-capturing? false)
        )
   )
   back
   add
))

(define my-friend?
   (and (in-zone? inner $1)
        (not (position-flag? from? $1)) 
        (friend? $1)
   )
)

(define set-in-line
   (if (in-zone? in-line-option $1)
       (set-attribute in-line? true)
   )
)

(define check-side
   (set-flag is-checked? false)
   (if (my-friend? $1)
       mark $1
       (if (my-friend? $1)
           (set-flag is-checked?  true)
           (set-flag is-accepted? false)
           (set-position-flag is-marked? true $2)
           (set-position-flag is-marked? true $3)
           $1
           (set-position-flag is-marked? true $2)
           (set-position-flag is-marked? true $3)
       )
       back
       (if (flag? is-checked?)
           (set-position-flag is-marked? true $2)
           (set-position-flag is-marked? true $3)
           mark
           (set-in-line $4) $1
           (set-in-line $4) $1
           (set-in-line $4)
           back
       )
   )
)

(define check-middle
   (if (and (my-friend? $1) (my-friend? $2))
       (set-flag is-accepted? false)
       (set-in-line $5)
       mark
       $1
       (set-in-line $5)
       (set-position-flag is-marked? true $3)
       (set-position-flag is-marked? true $4)
       $2 $2
       (set-in-line $5)
       (set-position-flag is-marked? true $3)
       (set-position-flag is-marked? true $4)
       back
       (set-position-flag is-marked? true $3)
       (set-position-flag is-marked? true $4)
   )
)

(define drop-man (
   (verify (in-zone? inner))
   (verify empty?)
   (set-flag is-accepted? true)
   (check-side n w e $1) (check-side s w e $1)
   (check-side w n s $1) (check-side e n s $1)
   (check-middle n s w e $1)
   (check-middle w e n s $1)
   (verify (flag? is-accepted?))
   (set-flag continue true)
   mark a0
   (while (on-board? res) 
        res
        (if (and (flag? continue) friend?)
            (set-flag continue false)
            capture
        )
   )
   back
   add
))

(define shift-common
   (set-position-flag from? true)
   (verify (in-zone? inner))
   $1
   (verify (in-zone? inner))
   (verify empty?)
   (set-flag is-accepted? true)
   (check-side $1 $2 $4 $5)
   (check-side $2 $3 $1 $5)
   (check-side $4 $1 $3 $5)
   (check-middle $2 $4 $1 $3 $5)
   (if (not-flag? is-accepted?)
        mark a0 
        (while (on-board? next) 
            next
            (if (and enemy? (position-flag? is-marked?))
                (set-attribute is-capturing? true)
            )
        )
        back
   )
   add
)

(define clear-in-line
   mark
   $1 
   (set-attribute in-line? false)
   (set-position-flag is-from true)
   a0 
   (while (on-board? next) 
        next
        (if (and friend? in-line? (not-position-flag? is-from))
            (set-attribute in-line? false)
        )
   )
   back
)

(define shift-prior (
   (verify in-line?)
   (clear-in-line $1)
   (shift-common $1 $2 $3 $4 $5)
))

(define shift-man (
   (verify (not in-line?))
   (shift-common $1 $2 $3 $4 $5)
))

(define board-def
  (board
    (image "../images/yote/Yote.bmp")
    (grid
      (start-rectangle 1 1 49 49)
      (dimensions
        ("1/2/3/4/5/6" (48 0)) ; files
        ("x/y/a/b/c/d/e/z/t" (0 48)) ; ranks
      )
      (directions (n 0 -1) (s 0 1) (e 1 0) (w -1 0) (next 0 1) (res 1 0)) 
    )
    (dummy a0)
    (links next (a0 1a) (1e 2a) (2e 3a) (3e 4a) (4e 5a) (5e 6a))
    (links res  (a0 1x) (6x 1y) (6y 1z) (6z 1t))
    (zone (name inner) (players White Black)
          (positions 1a 1b 1c 1d 1e
                     2a 2b 2c 2d 2e
                     3a 3b 3c 3d 3e
                     4a 4b 4c 4d 4e
                     5a 5b 5c 5d 5e
                     6a 6b 6c 6d 6e
          )
    )
    (zone (name in-line-option) (players White Black) (positions $1))
  )
)

(game
  (title "Bolotoudou")
  (description "")
  (history  "Traditional game.")

  (move-sound    "Audio/Pickup.wav")
  (release-sound "Audio/Pickup.wav")
  (drop-sound    "Audio/Pickup.wav")
  (capture-sound "")

  (option "pass turn" forced)
  (option "recycle captures" true)
  (option "prevent flipping" 2)
  (option "animate captures" false)
  (option "animate drops" false)

  (move-priorities prioritytype normaltype)

  (players    White Black)
  (turn-order (White droptype) (White droptype) (Black droptype) (Black droptype)
              (White droptype) (White droptype) (Black droptype) (Black droptype)
              (White droptype) (White droptype) (Black droptype) (Black droptype)
              (White droptype) (White droptype) (Black droptype) (Black droptype)
              (White droptype) (White droptype) (Black droptype) (Black droptype)
              (White droptype) (White droptype) (Black droptype) (Black droptype)
              repeat 
              White (White capturetype)
              Black (Black capturetype)
  )
  (board-def 1c)
  (piece
     (name  Lock)
     (image White "../images/other/pass.bmp"
            Black "../images/other/pass.bmp")
     (drops
        (move-type capturetype)
           (drop-lock)
     )
  )
  (piece
     (name  Man)
     (image White "../images/Hasami_Shogi/WStone.bmp"
            Black "../images/Hasami_Shogi/BStone.bmp")
     (attribute in-line? false)
     (attribute is-capturing? false)
     (drops
        (move-type droptype)
           (drop-man 1b)
     )
     (moves
        (move-type prioritytype)
           (shift-prior n e s w 1a)
           (shift-prior e s w n 1a)
           (shift-prior s w n e 1a)
           (shift-prior w n e s 1a)
        (move-type normaltype)
           (shift-man n e s w 1a)
           (shift-man e s w n 1a)
           (shift-man s w n e 1a)
           (shift-man w n e s 1a)
     )
  )

  (board-setup
    (White (Man 1z 2z 3z 4z 5z 6z 1t 2t 3t 4t 5t 6t off 12) (Lock off 1) )
    (Black (Man 1x 2x 3x 4x 5x 6x 1y 2y 3y 4y 5y 6y off 12) (Lock off 1) )
  )

  (loss-condition (White Black) (pieces-remaining 2))
)

(variant
  (title "Bolotoudou (variant)")
  (board-def 1a)
)
