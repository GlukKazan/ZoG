(define! -deep 3) 
(define! -common-directions (n e s w nw ne sw se))
(define! -bishop-directions (nw ne sw se))
(define! -rook-directions (n e s w))
(define! -knight-directions (nne nnw sse ssw ene ese wnw wsw))
(define! -pawn-directions (w e))

(define! repeat
  (if-less! 0 $1
     ($?2
        $2*
     )
     ($!2
        $1
     )
     (! repeat (!! (sum! $1 -1)) ($?2 $2*))
  )
)

(define! king-leap-all-n
  (if-less! 0 $1
     (for! $d ($ -common-directions)
        ( (concat! king-leap - $1) $d
        )
     )
     (! king-leap-all-n (!! (sum! $1 -1)))
  )
)

(define! king-leap-all
  (! king-leap-all-n ($ -deep))
)

(define! pawn-leap-all-n
  (if-less! 0 $1
     ( (concat! pawn-leap - $1) $2
     )
     (! pawn-leap-all-n (!! (sum! $1 -1)) $2)
  )
)

(define! pawn-leap-all
  (! pawn-leap-all-n ($ -deep) $1)
)

(define! pawn-capture-all-n
  (if-less! 0 $1
     (for! $d ($ -pawn-directions)
        ( (concat! pawn-capture - $1) 
          (concat! n $d) $2
        )
     )
     (! pawn-capture-all-n (!! (sum! $1 -1)) $2)
  )
)

(define! pawn-capture-all
  (! pawn-capture-all-n ($ -deep) $1)
)

(define! en-passant-all-n
  (if-less! 0 $1
     (for! $d ($ -pawn-directions)
        ( (concat! en-passant - $1) $d
        )
     )
     (! en-passant-all-n (!! (sum! $1 -1)))
  )
)

(define! en-passant-all
  (! en-passant-all-n ($ -deep))
)

(define! rook-slide-all-n-m
  (if-less! 0 $1
     (for! $d ($ -rook-directions)
        ( (concat! rook-slide - $1 - $2) $d
        )
     )
     (! rook-slide-all-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! rook-slide-all-n
  (if-less! 0 $1
     (! rook-slide-all-n-m ($ -deep) $1)
     (! rook-slide-all-n (!! (sum! $1 -1)))
  )
)

(define! rook-slide-all
  (! rook-slide-all-n 7)
)

(define! r-slide-all-n-m
  (if-less! 0 $1
     (for! $d ($ -rook-directions)
        ( (concat! slide - $1 - $2) $d
        )
     )
     (! r-slide-all-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! r-slide-all-n
  (if-less! 0 $1
     (! r-slide-all-n-m ($ -deep) $1)
     (! r-slide-all-n (!! (sum! $1 -1)))
  )
)

(define! r-slide-all
  (! r-slide-all-n 7)
)

(define! bishop-slide-all-n-m
  (if-less! 0 $1
     (for! $d ($ -bishop-directions)
        ( (concat! slide - $1 - $2) $d
        )
     )
     (! bishop-slide-all-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! bishop-slide-all-n
  (if-less! 0 $1
     (! bishop-slide-all-n-m ($ -deep) $1)
     (! bishop-slide-all-n (!! (sum! $1 -1)))
  )
)

(define! bishop-slide-all
  (! bishop-slide-all-n 7)
)

(define! knight-leap-all-n
  (if-less! 0 $1
     (for! $d ($ -knight-directions)
        ( (concat! leap - $1) $d
        )
     )
     (! knight-leap-all-n (!! (sum! $1 -1)))
  )
)

(define! knight-leap-all
  (! knight-leap-all-n ($ -deep))
)

(define! push-n
  (if-less! 0 $1
     (define (concat! push - $1)
        (if (and not-empty? (not-piece? K))
            (while not-empty?
                cascade
                from
                (! repeat $1 d)
                to
                (! repeat (!! (sum! $1 -1)) u)
            )
        )
     )
     (! push-n (!! (sum! $1 -1)))
  )
)

(define! push-all
  (! push-n ($ -deep))
)

(define! pop-n
  (if-less! 0 $1
     (define (concat! pop - $1)
        (! repeat $1 d)
        (verify not-enemy?)
        (unprom)
        (while not-empty?
           cascade
           from
           (! repeat $1 u)
           to
           (! repeat (!! (sum! $1 1)) d)
        )
     )
     (! pop-n (!! (sum! $1 -1)))
  )
)

(define! pop-all
  (! pop-n ($ -deep))
)

(define! move-n
  (concat! $ 1)
  (! repeat (!! (sum! $1 -1))
      (verify empty?)
      (concat! $ 1)
  )    
)

(define! tail-n-m
  (if-less! 0 $1
     back
     (! repeat $1 d)
     (verify not-empty?)
     cascade
     from
     (! move-n $2)
     to
     (! tail-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! tail-n
  (if-less! 0 $1
     back
     (! repeat $1 d)
     (verify not-empty?)
     cascade
     from n to
     (! tail-n (!! (sum! $1 -1)))
  )
)

(define! tail-enpass
  (if-less! 0 $1
     back
     (! repeat $1 d)
     (verify not-empty?)
     cascade
     from
     (concat! $ 1)
     n to
     (! tail-enpass (!! (sum! $1 -1)))
  )
)

(define! slide-n-m
  (if-less! 0 $1
     (define (concat! slide - $1 - $2) (
         (verify (in-zone? plane)) 
         mark
         (! move-n $2)
         to
         (if-less! 1 $1
             (! tail-n-m (!! (sum! $1 -1)) $2)
             back
             (! move-n $2)
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         add
     ))
     (! slide-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! slide-m
  (if-less! 0 $1
     (! slide-n-m ($ -deep) $1)
     (! slide-m (!! (sum! $1 -1)))
  )
)

(define! slide
  (! slide-m 7)
)

(define! rook-slide-n-m
  (if-less! 0 $1
     (define (concat! rook-slide - $1 - $2) (
         (verify (in-zone? plane)) 
         mark
         (! move-n $2)
         (set-attribute never-moved? false) 
         to
         (if-less! 1 $1
             (! tail-n-m (!! (sum! $1 -1)) $2)
             back
             (! move-n $2)
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         add
     ))
     (! rook-slide-n-m (!! (sum! $1 -1)) $2)
  )
)

(define! rook-slide-m
  (if-less! 0 $1
     (! rook-slide-n-m ($ -deep) $1)
     (! rook-slide-m (!! (sum! $1 -1)))
  )
)

(define! rook-slide
  (! rook-slide-m 7)
)

(define! leap-n
  (if-less! 0 $1
     (define (concat! leap - $1) (
         (verify (in-zone? plane)) 
         mark
         (! move-n 1)
         to
         (if-less! 1 $1
             (! tail-n-m (!! (sum! $1 -1)) 1)
             back
             (! move-n 1)
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         add
     ))
     (! leap-n (!! (sum! $1 -1)))
  )
)

(define! leap
  (! leap-n ($ -deep))
)

(define! king-leap-n
  (if-less! 0 $1
     (define (concat! king-leap - $1) (
         (verify (in-zone? plane)) 
         mark
         (! move-n 1)
         (set-attribute never-moved? false) 
         to
         (if-less! 1 $1
             (! tail-n-m (!! (sum! $1 -1)) 1)
             back
             (! move-n 1)
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         add
     ))
     (! king-leap-n (!! (sum! $1 -1)))
  )
)

(define! king-leap
  (! king-leap-n ($ -deep))
)

(define! pawn-leap-n
  (if-less! 0 $1
     (define (concat! pawn-leap - $1) (
         (verify (in-zone? plane)) 
         mark n
         (verify empty?)
         (set-attribute never-moved? false) 
         to
         (if-less! 1 $1
             (! tail-n (!! (sum! $1 -1)))
             back n
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         back
         n
         (if (in-zone? promotion)
             cascade
             (add (concat! $ 1))
          else
             add
         )
     ))
     (! pawn-leap-n (!! (sum! $1 -1)))
  )
)

(define! pawn-leap
  (! pawn-leap-n ($ -deep))
)

(define! pawn-capture-n
  (if-less! 0 $1
     (define (concat! pawn-capture - $1) (
         (verify (in-zone? plane)) 
         mark
         (concat! $ 1)
         (verify not-empty?)
         (verify (or enemy? (not-piece? K)))
         (set-attribute never-moved? false) 
         to
         (if-less! 1 $1
             (! tail-n-m (!! (sum! $1 -1)) 1)
             back 
             (! move-n 1)
         )
         ((concat! push - $1))
         back
         ((concat! pop - $1))
         back
         (concat! $ 1)
         (if (in-zone? promotion)
             cascade
             (add (concat! $ 2))
          else
             add
         )
     ))
     (! pawn-capture-n (!! (sum! $1 -1)))
  )
)

(define! pawn-capture
  (! pawn-capture-n ($ -deep))
)

(define! en-passant-n
  (if-less! 0 $1
     (define (concat! en-passant - $1) (
         (verify (in-zone? plane)) 
         mark
         (concat! $ 1)
         (verify enemy?)
         (verify last-to?)
         (verify (or (piece? PR) (piece? PN) (piece? PB) (piece? PB) (piece? PQ) (piece? PH)))
         n to n
         (verify last-from?)
         cascade
         back
         (concat! $ 1)
         from
         n d to
         (if-less! 1 $1
             (! tail-enpass (!! (sum! $1 -1)))
             back 
             (concat! $ 1)
             n
         )
         back
         ((concat! pop - $1))
         add   
     ))
     (! en-passant-n (!! (sum! $1 -1)))
  )
)

(define! en-passant
  (! en-passant-n ($ -deep))
)

(define unprom
   (if not-empty?
      cascade
      from
      (if (piece? HP)
          u
          to
          (change-type PH)
          d d
       else
          (if (piece? QP)
              u
              to
              (change-type PQ)
              d d
           else
              (if (piece? BP)
                  u
                  to
                  (change-type PB)
                  d d
               else
                  (if (piece? NP)
                      u
                      to
                      (change-type PN)
                      d d
                   else
                      (if (piece? RP)
                          u
                          to
                          (change-type PR)
                          d d
                       else
                          u
                          to
                          d d
                      )
                  )
              )
          )
      )
   )
)

(define pawn-jump (
   (verify (in-zone? plane)) 
   (verify never-moved?)
   n
   (verify empty?)
   n
   (verify empty?)
   (set-attribute never-moved? false) 
   add
))

(define O-O ( 
   (verify never-moved?)
   e
   (verify empty?)
   e
   (verify empty?)
   cascade
   e
   (verify (and friend? (piece? R) never-moved?) )
   from
   back
   (verify not-attacked?)
   e
   (verify not-attacked?)
   to
   (set-attribute never-moved? false)
   e
   (set-attribute never-moved? false)
   add
))

(define O-O-O ( 
   (verify never-moved?)
   w
   (verify empty?)
   w
   (verify empty?)
   cascade
   w
   (verify empty?)
   w
   (verify (and friend? (piece? R) never-moved?) )
   from
   back
   (verify not-attacked?)
   w
   (verify not-attacked?)
   to
   (set-attribute never-moved? false)
   w
   (set-attribute never-moved? false)
   add
))

(! push-all)
(! pop-all)
(! slide)
(! rook-slide)
(! leap)
(! king-leap)
(! pawn-leap)
(! pawn-capture)
(! en-passant)

(game
   (title "Tavreli")

   (option "prevent flipping" 2)

   (move-sound "Audio\Pickup.wav")
   (release-sound "Audio\Pickup.wav")
   (capture-sound "")
   (drop-sound "")

   (players White Black)
   (turn-order White Black)

   (board
     (image "images\Chess\SHaag\Chess8x8.bmp")
     (grid
        (start-rectangle 5 5 53 53)
        (dimensions
            ("a/b/c/d/e/f/g/h" (49 0)) ; files
            ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
            ("a/b/c/d" (0 1000)) ; layers
;           ("a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" (0 1000)) ; layers
        )
        (directions (n   0 -1 0) (e    1  0  0) (s    0  1 0) (w   -1 0 0)
                    (ne  1 -1 0) (nw  -1 -1  0) (se   1  1 0) (sw  -1 1 0)
                    (nne 1 -2 0) (nnw -1 -2  0) (sse  1  2 0) (ssw -1 2 0)
                    (ene 2 -1 0) (ese  2  1  0) (wnw -2 -1 0) (wsw -2 1 0)
                    (d   0  0 1) (u    0  0 -1)
        )
     )
     (symmetry Black (n s)(s n) (nw sw)(sw nw) (ne se)(se ne))
     (zone
        (name plane)
        (players White Black)
        (positions 
           a8a b8a c8a d8a e8a f8a g8a h8a
           a7a b7a c7a d7a e7a f7a g7a h7a
           a6a b6a c6a d6a e6a f6a g6a h6a
           a5a b5a c5a d5a e5a f5a g5a h5a
           a4a b4a c4a d4a e4a f4a g4a h4a
           a3a b3a c3a d3a e3a f3a g3a h3a
           a2a b2a c2a d2a e2a f2a g2a h2a
           a1a b1a c1a d1a e1a f1a g1a h1a
        )
     )
     (zone
        (name promotion)
        (players White)
        (positions a8a b8a c8a d8a e8a f8a g8a h8a)
     )
     (zone
        (name promotion)
        (players Black)
        (positions a1a b1a c1a d1a e1a f1a g1a h1a)
     )
   )

   (piece
      (name PR)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute never-moved? true)
      (moves
         (! pawn-leap-all RP)
         (! pawn-capture-all RP)
         (! en-passant-all)
         (pawn-jump)
      )
   )

   (piece
      (name RP)
      (help "Rook: slides any number of squares along the row or column.")
      (image White "images\Chess\SHaag\wrook.bmp"
             Black "images\Chess\SHaag\brook.bmp")
      (moves
         (! r-slide-all)
      )
   )

   (piece
      (name PN)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute never-moved? true)
      (moves
         (! pawn-leap-all NP)
         (! pawn-capture-all NP)
         (! en-passant-all)
         (pawn-jump)
      )
   )

   (piece
      (name NP)
      (help "Knight: moves like an `L`, 2 squares one way and one the other")
      (image White "images\Chess\SHaag\wknight.bmp"
             Black "images\Chess\SHaag\bknight.bmp")
      (moves
         (! knight-leap-all)
      )
   )

   (piece
      (name PB)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute never-moved? true)
      (moves
         (! pawn-leap-all BP)
         (! pawn-capture-all BP)
         (! en-passant-all)
         (pawn-jump)
      )
   )

   (piece
      (name BP)
      (help "Bishop: slides diagonally any number of squares")
      (image White "images\Chess\SHaag\wbishop.bmp"
             Black "images\Chess\SHaag\bbishop.bmp")
      (moves
         (! bishop-slide-all)
      )
   )

   (piece
      (name PQ)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute never-moved? true)
      (moves
         (! pawn-leap-all QP)
         (! pawn-capture-all QP)
         (! en-passant-all)
         (pawn-jump)
      )
   )

   (piece
      (name QP)
      (help "Queen: can slide any number of squares in any direction")
      (image White "images\Chess\SHaag\wqueen.bmp"
             Black "images\Chess\SHaag\bqueen.bmp")
      (moves
         (! r-slide-all)
         (! bishop-slide-all)
      )
   )

   (piece
      (name PH)
      (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (image White "images\Chess\SHaag\wpawn.bmp"
             Black "images\Chess\SHaag\bpawn.bmp")
      (attribute never-moved? true)
      (moves
         (! pawn-leap-all HP)
         (! pawn-capture-all HP)
         (! en-passant-all)
         (pawn-jump)
      )
   )

   (piece
      (name HP)
      (help "Helg: can slide any number of squares in any direction and move like Knight")
      (image White "images\Chess\SHaag\wdownqueen.bmp"
             Black "images\Chess\SHaag\bdownqueen.bmp")
      (moves
         (! r-slide-all)
         (! bishop-slide-all)
         (! knight-leap-all)
      )
   )

   (piece
      (name R)
      (help "Rook: slides any number of squares along the row or column.")
      (image White "images\Chess\SHaag\wrook.bmp"
             Black "images\Chess\SHaag\brook.bmp")
      (attribute never-moved? true)
      (moves
         (! rook-slide-all)
      )
   )

   (piece
      (name N)
      (help "Knight: moves like an `L`, 2 squares one way and one the other")
      (image White "images\Chess\SHaag\wknight.bmp"
             Black "images\Chess\SHaag\bknight.bmp")
      (moves
         (! knight-leap-all)
      )
   ) 

   (piece
      (name B)
      (help "Bishop: slides diagonally any number of squares")
      (image White "images\Chess\SHaag\wbishop.bmp"
             Black "images\Chess\SHaag\bbishop.bmp")
      (moves
         (! bishop-slide-all)
      )
   )

   (piece
      (name Q)
      (help "Queen: can slide any number of squares in any direction")
      (image White "images\Chess\SHaag\wqueen.bmp"
             Black "images\Chess\SHaag\bqueen.bmp")
      (moves
         (! r-slide-all)
         (! bishop-slide-all)
      )
   )

   (piece
      (name K)
      (help "King: steps 1 square in any direction to a safe square")
      (image White "images\Chess\SHaag\wking.bmp"
             Black "images\Chess\SHaag\bking.bmp")
      (attribute never-moved? true)
      (moves
         (! king-leap-all)
         (O-O)
         (O-O-O)
      )
   )

   (board-setup
      (White
         (PR a2a h2a)
         (PN b2a g2a)
         (PB c2a f2a)
         (PQ d2a)
         (PH e2a)
         (R a1a h1a)
         (N b1a g1a)
         (B c1a f1a)
         (Q d1a)
         (K e1a)
      )
      (Black
         (PR a7a h7a)
         (PN b7a g7a)
         (PB c7a f7a)
         (PQ d7a)
         (PH e7a)
         (R a8a h8a)
         (N b8a g8a)
         (B c8a f8a)
         (Q d8a)
         (K e8a)
      )
   )

   (loss-condition (White Black) (checkmated K) )
)
