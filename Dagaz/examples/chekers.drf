(macro eat-pre-condition
   (pre (check (or is-first-part? is-current?)))
)

(macro checker-eat-begin
   (check direction)
   (check enemy?)
   (let current-set piece)
   (check (not is-captured?))
   (set is-captured? t)
   (let current-set current-piece)
   (let captured-counter (+ captured-counter 1))
   (if (is-piece-type? Dama)
       (let dama-captured-counter (+ dama-captured-counter 1))
   )
)

(macro checker-eat-end
   (check direction)
   (check empty?)
   (move from here)
   (end-move-part eat-mode)
)

(macro dama-eat-begin
   (loop
       (check direction)
       (break (not empty?))
   )
   (check enemy?)
   (let current-set piece)
   (check (not is-captured?))
   (set is-captured? t)
   (let current-set current-piece)
   (let captured-counter (+ captured-counter 1))
   (if (is-piece-type? Dama)
       (let dama-captured-counter (+ dama-captured-counter 1))
   )
)

(macro dama-eat-end
   (loop
       (check direction)
       (check empty?)
       (move from here)
       (end-move-part eat-mode)
   )
)

(macro (common-directions opposite-player)
   (dir (name nw)  -1  1)
   (dir (name ne)   1  1)
   (dir (name sw)  -1 -1)
   (dir (name se)   1 -1)
   (dir (players opposite-player) (nw se) (sw ne) (ne sw) (se nw))
)

(macro turkish-directions
   (dir (name n)   0  1)
   (dir (name s)   0 -1)
   (dir (name w)  -1  0)
   (dir (name e)   1  0)
   (dir (players Black) (n s) (s n))
)

(macro common-conditions
   (let is-first-part? t)
   (attribute is-current? f)
   (attribute is-captured? f)
   (pre
       (set is-current? f)
       (set is-captured? f)
   )
   (post
       (set is-first-part? f)
   )
   (post
       (if is-current?
             (check (= 0 (count-moves (and is-current? (= current-mode eat-mode)))))
       )
   )
)

(macro max-eat-conditions
   (let captured-counter 0)
   (let max-captured 0)
   (post
       (check (>= captured-counter max-captured))
       (set max-captured captured-counter)
   )
)

(macro priority-condition
   (pre
       (check (= 0 (count-moves (= current-mode eat-mode))))
   )
)

(macro set-current-condition
   (post
       (set is-current? t)
   )
)

(macro delayed-promotion-condition
   (post
       (if (and is-current? is-promouted?)
             (promote Dama)
       )
   )
)

(macro delayed-promotion-prepare
   (attribute is-promouted? f)
   (post 
        (if (in-zone? promotion)
             (set is-promouted? t)
        )
   )
)

(macro immediate-promotion-condition
   (post 
        (if (in-zone? promotion)
             (promote Dama)
        )
   )
)

(macro break-promotion-condition
   (post 
        (if (in-zone? promotion)
             (promote Dama)
             end-move
        )
   )
)

(macro stalemate-goal
   (goals
       (loss stalemate?)
   )
)

(move
   (name checker-move)
   (arg direction)
   (action
       (check direction)
       (check empty?)
       (move from here)
       end-move
   )
)

(move
   (name checker-eat)
   eat-pre-condition
   (arg direction)
   (action
       checker-eat-begin
       capture
       checker-eat-end
   )
)

(move
   (name dama-move)
   (arg direction)
   (action
       (loop
           (check direction)
           (check empty?)
           (move from here)
           end-move
       )
   )
)

(move
   (name dama-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       dama-eat-begin
       capture
       dama-eat-end
   )
)

(move
   (name north-checker-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       checker-eat-begin
       (if (is-piece-type? Dama)
           (promote Checker)
       else
           capture
       )
       checker-eat-end
   )
)

(move
   (name north-dama-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       dama-eat-begin
       (if (is-piece-type? Dama)
           (promote Checker)
       else
           capture
       )
       dama-eat-end
   )
)

(move
   (name thai-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       dama-eat-begin
       capture
       checker-eat-end
   )
)

(move
   (name italian-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       checker-eat-begin
       (check (is-piece-type? Checker))
       capture
       checker-eat-end
   )
)

(move
   (name damone-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       checker-eat-begin
       (check (not (is-piece-type? Damone)))
       capture
       checker-eat-end
   )
)

(move
   (name turk-checker-eat)
   eat-pre-condition
   (arg direction)
   (action
       checker-eat-begin
       capture-immediate
       checker-eat-end
   )
)

(move
   (name turk-dama-eat)
   eat-pre-condidtion
   (arg direction)
   (action
       (check (not (= last-direction (opposite direction))))
       (set last-direction direction)
       dama-eat-begin
       capture-immediate
       dama-eat-end
   )
)

(variant
   (name "International Draughts")

   (players White Black)

   (board
      (grid J 10_1)
      (common-directions Black)
      (zone (name promotion)
            (players White)
            (positions B10 D10 F10 H10 J10)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 C1 E1 G1 I1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      max-eat-conditions
      delayed-promotion-condition
      (piece
            (name Checker)
            set-current-condition
            delayed-promotion-prepare
            (mode 
                  priority-condition
                  (name normal-mode)
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (dama-move nw) (dama-move ne) 
                         (dama-move sw) (dama-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (dama-eat nw) (dama-eat ne) 
                         (dama-eat sw) (dama-eat se)
                  )
            )
      )
   )

   (setup
      (White
         (Checker A1 C1 E1 G1 I1 B2 D2 F2 H2 J2 A3 C3 E3 G3 I3 B4 D4 F4 H4 J4)
      )
      (Black
         (Checker B10 D10 F10 H10 J10 A9 C9 E9 G9 I9 B8 D8 F8 H8 J8 A7 C7 E7 G7 I7)
      )
   )

   stalemate-goal
)

(variant
   (name "Russian Checkers")

   (players White Black)

   (board
      (grid H 8_1)
      (common-directions Black)
      (zone (name promotion)
            (players White)
            (positions B8 D8 F8 H8)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 C1 E1 G1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      (piece
            (name Checker)
            set-current-condition
            immediate-promotion-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (dama-move nw) (dama-move ne) 
                         (dama-move sw) (dama-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (dama-eat nw) (dama-eat ne) 
                         (dama-eat sw) (dama-eat se)
                  )
            )
      )
   )

   (setup
      (White
         (Checker A1 C1 E1 G1 B2 D2 F2 H2 A3 C3 E3 G3)
      )
      (Black
         (Checker B8 D8 F8 H8 A7 C7 E7 G7 B6 D6 F6 H6)
      )
   )

   stalemate-goal
)

(variant
   (name "Brazilian Draughts")

   (inherits "International Draughts")

   (board
      (grid H 8_1)
      (common-directions Black)
      (zone (name promotion)
            (players White)
            (positions B8 D8 F8 H8)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 C1 E1 G1)
      )
   )

   (setup
      (White
         (Checker A1 C1 E1 G1 B2 D2 F2 H2 A3 C3 E3 G3)
      )
      (Black
         (Checker B8 D8 F8 H8 A7 C7 E7 G7 B6 D6 F6 H6)
      )
   )
)

(variant
   (name "Diagonal Checkers")

   (inherits "Russian Checkers")

   (setup
      (White
         (Checker C1 E1 G1 D2 F2 H2 E3 G3 F4 H4 G5 H6)
      )
      (Black
         (Checker B8 D8 F8 A7 C7 E7 B6 D6 A5 C5 B4 A3)
      )
   )
)

(variant
   (name "Canadian Checkers")

   (inherits "International Draughts")

   (board
      (grid L 12_1)
      (common-directions Black)
      (zone (name promotion)
            (players White)
            (positions B12 D12 F12 H12 J12 L12)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 C1 E1 G1 I1 K1)
      )
   )

   (setup
      (White
         (Checker A1 C1 E1 G1 I1 K1 B2 D2 F2 H2 J2 L2 A3 C3 E3 G3 I3 K3 B4 D4 F4 H4 J4 L4 A5 C5 E5 G5 I5 K5)
      )
      (Black
         (Checker B10 D10 F10 H10 J10 L10 A9 C9 E9 G9 I9 K9 B8 D8 F8 H8 J8 L8 A7 C7 E7 G7 I7 K7 B6 D6 F6 H6 J6 L6)
      )
   )
)

(variant
   (name "80 Cells Checkers")

   (inherits "Russian Checkers")

   (board
      (grid J 8_1)
      (common-directions Black)
      (zone (name promotion)
            (players White)
            (positions B8 D8 F8 H8 J8)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 C1 E1 G1 I1)
      )
   )

   (setup
      (White
         (Checker A1 C1 E1 G1 I1 B2 D2 F2 H2 J2 A3 C3 E3 G3 I3)
      )
      (Black
         (Checker B8 D8 F8 H8 J8 A7 C7 E7 G7 I7 B6 D6 F6 H6 J8)
      )
   )
)

(variant
   (name "Stavropol Checkers")

   (inherits "Russian Checkers")

   (pieces
      common-conditions
      (piece
            (name Checker)
            set-current-condition
            immediate-promotion-condition
            (mode 
                  (name normal-mode)
                  (pre
                         (check (= 0 (count-moves (and friend? (= current-mode eat-mode)))))
                  )
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  (pre
                         (check (= 0 (count-moves (and friend? (= current-mode eat-mode)))))
                  )
                  (moves (dama-move nw) (dama-move ne) 
                         (dama-move sw) (dama-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (dama-eat nw) (dama-eat ne) 
                         (dama-eat sw) (dama-eat se)
                  )
            )
      )
   )
)

(variant
   (name "North Checkers")

   (inherits "Russian Checkers")

   (pieces
      (pre (check friend?))
      common-conditions
      (piece
            (name Checker)
            set-current-condition
            immediate-promotion-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (north-checker-eat nw) (north-checker-eat ne) 
                         (north-checker-eat sw) (north-checker-eat se)
                  )
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (dama-move nw) (dama-move ne) 
                         (dama-move sw) (dama-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (north-dama-eat nw) (north-dama-eat ne) 
                         (north-dama-eat sw) (north-dama-eat se)
                  )
            )
      )
   )
)

(variant
   (name "Thai Checkers")

   (inherits "Russian Checkers")

   (players Black White)

   (board
      (grid H 8_1)
      (common-directions White)
      (zone (name promotion)
            (players Black)
            (positions B8 D8 F8 H8)
      )
      (zone (name promotion)
            (players White)
            (positions A1 C1 E1 G1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      (piece
            (name Checker)
            set-current-condition
            immediate-promotion-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne))
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (dama-move nw) (dama-move ne) 
                         (dama-move sw) (dama-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (thai-eat nw) (thai-eat ne) 
                         (thai-eat sw) (thai-eat se)
                  )
            )
      )
   )

   (setup
      (Black
         (Checker A1 C1 E1 G1 B2 D2 F2 H2)
      )
      (White
         (Checker B8 D8 F8 H8 A7 C7 E7 G7)
      )
   )
)

(variant
   (name "English Draughts")

   (players Red White)

   (board
      (grid H 8_1)
      (common-directions White)
      (zone (name promotion)
            (players Red)
            (positions B8 D8 F8 H8)
      )
      (zone (name promotion)
            (players White)
            (positions A1 C1 E1 G1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      (piece
            (name Checker)
            set-current-condition
            break-promotion-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne))
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne) 
                         (checker-move sw) (checker-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
   )

   (setup
      (Red
         (Checker A1 C1 E1 G1 B2 D2 F2 H2 A3 C3 E3 G3)
      )
      (White
         (Checker B8 D8 F8 H8 A7 C7 E7 G7 B6 D6 F6 H6)
      )
   )

   stalemate-goal
)

(variant
   (name "Italian Draughts")

   (players Black White)

   (board
      (grid H 8_1)
      (common-directions White)
      (zone (name promotion)
            (players Black)
            (positions B8 D8 F8 H8)
      )
      (zone (name promotion)
            (players White)
            (positions A1 C1 E1 G1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      (let captured-counter 0)
      (let max-captured 0)
      (let dama-captured-counter 0)
      (let max-dama-captured 0)
      (post
            (check (>= captured-counter max-captured))
            (set max-captured captured-counter)
            (if (> captured-counter max-captured)
                  (set max-dama-captured 0)
            )
            (check (>= captured-dama-counter max-dama-captured))
            (set max-dama-captured dama-captured-counter)
      )
      (piece
            (name Checker)
            set-current-condition
            immediate-promotion-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne))
            )
            (mode 
                  (name eat-mode)
                  (moves (italian-eat nw) (italian-eat ne))
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne) 
                         (checker-move sw) (checker-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
   )

   (setup
      (Black
         (Checker B1 D1 F1 H1 A2 C2 E2 G2 B3 D3 F3 H3)
      )
      (White
         (Checker A8 C8 E8 G8 B7 D7 F7 H7 A6 C6 E6 G6)
      )
   )

   stalemate-goal
)

(variant
   (name "Italian Damone")

   (players Black White)

   (board
      (grid H 8_1)
      (common-directions White)
      (zone (name dama-promotion)
            (players Black)
            (positions A6 C8)
      )
      (zone (name dama-promotion)
            (players White)
            (positions F1 H3)
      )
      (zone (name damone-promotion)
            (players Black)
            (positions A8)
      )
      (zone (name damone-promotion)
            (players White)
            (positions H1)
      )
   )

   (pieces
      (pre (check friend?))
      common-conditions
      max-eat-conditions
      (piece
            (name Checker)
            set-current-condition
            (post 
                  (if (in-zone? dama-promotion)
                      (promote Dama)
                      (set is-promouted? t)
                  )
                  (if (in-zone? (and (not is-promouted?) damone-promotion))
                      (promote Damone)
                  )
            )
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne) (checker-move sw))
            )
            (mode 
                  (name eat-mode)
                  (moves (italian-eat nw) (italian-eat ne) (italian-eat sw))
            )
      )
      (piece
            (name Dama)
            (attribute is-promouted? f)
            set-current-condition
            (post 
                  (if (in-zone? damone-promotion)
                      (promote Damone)
                  )
            )
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne) 
                         (checker-move sw) (checker-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (damone-eat nw) (damone-eat ne) 
                         (damone-eat sw) (damone-eat se)
                  )
            )
      )
      (piece
            (name Damone)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (checker-move nw) (checker-move ne) 
                         (checker-move sw) (checker-move se)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (checker-eat nw) (checker-eat ne) 
                         (checker-eat sw) (checker-eat se)
                  )
            )
      )
   )

   (setup
      (Black
         (Checker D1 E2 F3 G4 H5)
         (Dama F1 H3)
         (Damone H1)
      )
      (White
         (Checker A4 B5 C6 D7 E8)
         (Dama A6 C8)
         (Damone A8)
      )
   )

   (goals
      (loss stalemate?)
      (loss (is-killed? Damone))
   )
)

(variant
   (name "Turkish draughts")

   (players White Black)

   (board
      (grid H 8_1)
      (dir (name dummy))
      turkish-directions
      (zone (name promotion)
            (players White)
            (positions A8 B8 C8 D8 E8 F8 G8 H8)
      )
      (zone (name promotion)
            (players Black)
            (positions A1 B1 C1 D1 E1 F1 G1 H1)
      )
   )

   (pieces
      (pre (check friend?))
      (let last-direction dummy)
      common-conditions
      max-eat-conditions
      delayed-promotion-condition
      (piece
            (name Checker)
            set-current-condition
            delayed-promotion-prepare
            (mode 
                  priority-condition
                  (name normal-mode)
                  (moves (checker-move n) (checker-move e) (checker-move w))
            )
            (mode 
                  (name eat-mode)
                  (moves (turk-checker-eat n) (turk-checker-eat e) (turk-checker-eat w))
            )
      )
      (piece
            (name Dama)
            set-current-condition
            (mode 
                  (name normal-mode)
                  priority-condition
                  (moves (dama-move n) (dama-move s) 
                         (dama-move w) (dama-move e)
                  )
            )
            (mode 
                  (name eat-mode)
                  (moves (turk-dama-eat n) (turk-dama-eat s) 
                         (turk-dama-eat w) (turk-dama-eat e)
                  )
            )
      )
   )

   (setup
      (White
         (Checker A2 B2 C2 D2 E2 F2 G2 H2 A3 B3 C3 D3 E3 F3 G3 H3)
      )
      (Black
         (Checker A7 B7 C7 D7 E7 F7 G7 H7 A6 B6 C6 D6 E6 F6 G6 H6)
      )
   )

   stalemate-goal
)
