; Русские шахматы
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; http://cyclowiki.org/wiki/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B5_%D1%88%D0%B0%D1%85%D0%BC%D0%B0%D1%82%D1%8B

(def rook-dirs (list n s w e))
(def bishop-dirs (list nw sw ne se))
(def knight-dirs (list nnw nne een ees sse ssw wwn wws))
(def pawn-captures (list nw ne))
(def pawn-sides (list w e))
(def pawn-types (list Pawn-Rook Pawn-Knight Pawn-Bishop Pawn-Queen Pawn-Helg))
(def rook-types (list Rook Pawn-Rook Pawn-Helg))
(def khight-types (list Knight Pawn-Knight Pawn-Queen Pawn-Helg))
(def bishop-types (list Bishop Pawn-Bishop Pawn-Queen Pawn-Helg))

(def (leap X)
     X
     (if (not (mode? special))
         (check (not (piece? King)))     ; Не можем ставить фигуру на короля (но можем угрожать ему)
     )
     add                                 ; Добавляем снятую стопку поверх фигуры
     (set-attribute! never-moved? f Piece)
     end-move
)

(def (slide X)
     (loop
           X
;          (check (not (piece? King)))
           save-state
           add
           (set-attribute! never-moved? f Piece)
           end-move
     )
)

(def check-promoution
     (if (in-zone? promotion)
         (set-attribute! promouted? t Piece)
     )
     (set-attribute! never-moved? f Piece)
     add
)

(def pawn-move
     n
     (check empty?)
     save-state
     (set-attribute! jumped? 0 Piece)
     (check-promoution)
     end-move
     restore-state
     (if (never-moved? Piece)
         n
         (check empty?)
         (set-attribute! jumped? 2 Piece)
         (set-attribute! never-moved? f Piece)
         add
         end-move
     )
)

(def (pawn-capture X)
     X
     (check (not empty?))
     (check (not (piece? King)))
     (set-attribute! never-moved? f Piece)
     (set-attribute! promouted? f)        ; Снимаем атрибут у пешек нижней части стопки
     (check-promoution)
     (set-attribute! never-moved? f)      ; Снимаем атрибут у всех фигур стопки
     (set-attribute! jumped? 0 Piece)
     end-move
)

(def (en-passant X)
     X
     (let Target (copy 1))
     (check (jumped? Target))
     add
     (set-attribute! jumped? 0)
     (set-attribute! never-moved? f Piece)
     lock                                ; Снимаем всю стопку со взятыми фигурами
     n
     (check empty?)
     add
     end-move
)

(def (move-common N)
     (lock N)                            ; Снимаем верхнюю часть фигур
     (if (and (in Piece pawn-types) (not (promouted? Piece)))
         save-all
         (pawn-move)
         restore-all 
         (for X pawn-captures
              save-all
              (pawn-capture X)
         )
         (for X pawn-sides
              save-all
              (en-passant X)
         )
     )
     (if (and (in Piece rook-types) (promouted? Piece))
         (for X rook-dirs
              save-all
              (slide X)
         )
     )
     (if (and (in Piece khight-types) (promouted? Piece))
         (for X knight-dirs
              save-all
              (leap X)
         )
     )
     (if (and (in Piece bishop-types) (promouted? Piece))
         (for X bishop-dirs
              save-all
              (slide X)
         )
     )


(def move-all
     (check (not empty?))
     (let Piece (copy 1))                ; Смотрим на верхнюю фигуру в стопке
     (check (friend? Piece))             ; Наверху дружественная фигура?
     (while N (<= size)                  ; size - количество фигур в текущей клетке
           save-all
           (move-common N)               ; Если check не выполняется во вложенной процедуре - цикл не прерывается
     )
)

(def O-O
     (check never-moved?)
     (check (not (attacked? special)))   ; Для рассчета attacked, перемещаемая фигура временно устанавливается на поле
     lock                                ; Предусмотреть кэширование результатов и частичный рассчет (для одного поля)
     e
     (check empty?)
     (check (not (attacked? special)))
     e
     (check empty?)
     (check (not (attacked? special)))
     add
     (set-attribute! never-moved? f)
     e
     cascade
     (check never-moved?)
     (check (not (attacked? special)))
     lock
     w
     w
     add
     (set-attribute! never-moved? f)
     end-move
)

(def O-O-O
     (check never-moved?)
     (check (not (attacked? special)))
     lock
     w
     (check empty?)
     (check (not (attacked? special)))
     w
     (check empty?)
     (check (not (attacked? special)))
     w
     (check empty?)
     (check (not (attacked? special)))
     add
     (set-attribute! never-moved? f)
     w
     cascade
     (check never-moved?)
     (check (not (attacked? special)))
     lock
     e
     e
     add
     (set-attribute! never-moved? f)
     end-move
)

(variant
   (title "Tavreli")

   (players White Black)
   (turn-order White Black)

   (board
        (grid (dims (name board)
                    "a/b/c/d/e/f/g/h"
                    "8/7/6/5/4/3/2/1")
              (dir (name n)    0 -1)
              (dir (name s)    0  1)
              (dir (name e)    1  0)
              (dir (name w)   -1  0)
              (dir (name nw)  -1 -1)
              (dir (name ne)   1 -1)
              (dir (name sw)  -1  1)
              (dir (name se)   1  1)
              (dir (name nnw) -1 -2)
              (dir (name nne)  1 -2)
              (dir (name een)  2 -1)
              (dir (name ees)  2  1)
              (dir (name sse)  1  2)
              (dir (name ssw) -1  2)
              (dir (name wwn) -2 -1)
              (dir (name wws) -2  1)
        )
        (dir (players Black) (n s)(s n)(nw sw)(sw nw)(ne se)(se ne))
        (zone (name promotion)
              (players White)
              (positions a8 b8 c8 d8 e8 f8 g8 h8)
        )
        (zone (name promotion)
              (players Black)
              (positions a1 b1 c1 d1 e1 f1 g1 h1)
        )
   )

   (pieces
        (Pawn-Rook
              (attribute never-moved? t)
              (attribute promouted? f)
              (attribute jumped? 0)
        )
        (Pawn-Knight
              (attribute never-moved? t)
              (attribute promouted? f)
              (attribute jumped? 0)
        )
        (Pawn-Bishop
              (attribute never-moved? t)
              (attribute promouted? f)
              (attribute jumped? 0)
        )
        (Pawn-Queen
              (attribute never-moved? t)
              (attribute promouted? f)
              (attribute jumped? 0)
        )
        (Pawn-Helg
              (attribute never-moved? t)
              (attribute promouted? f)
              (attribute jumped? 0)
        )
        (Rook
              (attribute never-moved? t)
              (constant promouted? t)
        )
        (Knight
              (constant promouted? t)
        )
        (Bishop
              (constant promouted? t)
        )
        (Queen
              (constant promouted? t)
        )
        (King
              (attribute never-moved? t)
              (moves move-all O-O O-O-O) ; Перекрывает глобальное определение, если наверху King
        )
   )
   (setup
      (White
         (Pawn-Rook a2 h2)
         (Pawn-Knight b2 g2)
         (Pawn-Bishop c2 f2)
         (Pawn-Queen d2)
         (Pawn-Helg e2)
         (Knight b1 g1)
         (Bishop c1 f1)
         (Rook a1 h1)
         (Queen d1)
         (King e1)
      )
      (Black
         (Pawn-Rook a7 h7)
         (Pawn-Knight b7 g7)
         (Pawn-Bishop c7 f7)
         (Pawn-Queen d7)
         (Pawn-Helg e7)
         (Knight b8 g8)
         (Bishop c8 f8)
         (Rook a8 h8)
         (Queen d8)
         (King e8)
      )
   )
   (moves move-all)
   (goals
        ((loss-condition (White Black) (King)) checkmated)
        ((turn-condition (King)) (= (sum pices (attacked? special)) 0))
        ((turn-condition pawn-types)
            (if (> jumped? 0)
                (set-attribute! jumped? (- jumped? 1))
            )
        )
   )
)
