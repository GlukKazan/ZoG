; Шашки
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; http://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D1%88%D0%BA%D0%B8

(def forward-dirs (list nw ne))
(def all-dirs (list nw sw ne se))

(def (capture-checker-all U)
     lock
     (for X all-dirs
          save-all
          X
          (check (enemy? U))
          capture
          X
          (check empty?)
          (check (not marked-position?))
          (set-position-flag marked-position? t)
          (if (in-zone? promotion)
              (add King)
          else
               add
          )
          (end-move-part (mode current-mode))
     )
)

(def (capture-king-all U)
     lock
     (for X all-dirs
          save-all
          (loop
                X
                (check empty?)
          )
          (check (enemy? U))
          capture
          (loop
                X
                (check empty?)           ; При нарушении условия, loop цикл прерывается
                save-state               ; При восстановлении, снимается позиционный флаг установленный в текущей, но не в предыдущих итерациях цикла
                (check (not marked-position?))
                (set-position-flag marked-position? t)
                add
                (end-move-part (mode current-mode))
          )
     )
)

(def capture-white-checker-all
     (check (enemy? White))
     (capture-checker-all White)
)

(def capture-black-checker-all
     (check (enemy? Black))
     (capture-checker-all White)
)

(def capture-white-king-all
     (check (enemy? White))
     (capture-king-all White)
)

(def capture-black-king-all
     (check (enemy? Black))
     (capture-king-all White)
)

(def move-checker-all
     lock
     (for X forward-dirs
          save-all
          X
          (check empty?)
          (if (in-zone? promotion)
              (add King)
          else
               add
          )
          end-move
     )
)

(def move-king-all
     lock
     (for X all-dirs
          save-all
          (loop
                X
                (check empty?)
                save-state
                add
                end-move
          )
     )
)

(def move-white-checker-all
     (check (friend? White))
     (move-checker-all)
)

(def move-black-checker-all
     (check (friend? Black))
     (move-checker-all)
)

(def move-white-king-all
     (check (friend? White))
     (move-king-all)
)

(def move-black-king-all
     (check (friend? Black))
     (move-king-all)
)

(variant
   (title "Ставропольские шашки")

   (players White Black)
   (turn-order White Black)

   (board
        (grid (dims (name board)
                    "a/b/c/d/e/f/g/h"
                    "8/7/6/5/4/3/2/1")
              (dir (name nw) -1 -1)
              (dir (name ne)  1 -1)
              (dir (name sw) -1  1)
              (dir (name se)  1  1)
        )
        (dir (players Black) (nw sw)(sw nw)(ne se)(se ne))
        (zone (name promotion)
              (players White)
              (positions b8 d8 f8 h8)
        )
        (zone (name promotion)
              (players Black)
              (positions a1 c1 e1 g1)
        )
   )

   (setup
      (White
         (Checker a1 c1 e1 g1 b2 d2 f2 h2 a3 c3 e3 g3)
      )
      (Black
         (Checker b8 d8 f8 h8 a7 c7 e7 g7 b6 d6 f6 h6)
      )
   )

   (move-priorities (pices White) (with-black-capture (with-white-capture without-capture)))
   (move-priorities (pices Black) (with-white-capture (with-black-capture without-capture)))
   (pieces 
      (Checker
             (moves
                    (mode with-white-capture)
                    capture-white-checker-all
                    (mode with-black-capture)
                    capture-black-checker-all
                    (mode without-capture)
                    move-white-checker-all
                    move-black-checker-all
             )
       )
       (King
             (moves
                    (mode with-white-capture)
                    capture-white-king-all
                    (mode with-black-capture)
                    capture-black-king-all
                    (mode without-capture)
                    move-white-king-all
                    move-black-king-all
             )
       )
   )

   (goals
       (attribute max-captures 0)        ; Обнуляется перед вычислением списка возможных ходов
       (turn-condition                   ; Используется нарушаемый инвариант (повторная проверка ранее отобранного хода производится при измененеии значения атрибута)
             (let cnt-captures (sum -all-captured))
             (check (>= cnt-captures max-captures))
             (set-attribute! max-captures cnt-captures)
       )
       ((loss-condition White) (stalemated with-black-capture without-capture-white))
       ((loss-condition Black) (stalemated with-white-capture without-capture-black))
   )
)
