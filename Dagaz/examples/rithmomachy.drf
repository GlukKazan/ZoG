; Ритмомахия
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; http://www-cs.canisius.edu/~salley/SCA/Games/rithmomachy.html
; http://www.boardspace.net/rithmomachy/english/rules.html
; http://jducoeur.org/game-hist/mebben.ryth.html

(def orthogonal-dirs (list n s w e))
(def diagonal-dirs (list nw sw ne se))

(def check-siege
     (if stalemated?                     ; Если фигура блокирована со всех сторон (не может совершить ход)
         capture                         ; Удаляем её
     )
)

(def check-equality
     (check enemy?)                      ; На случай, если фигура была взята ранее
     (while N (<= -size)                 ; Итераторы автоматически корректируются при возможном удалении в теле цикла
          (let X (get v (copy N 1)))     ; Получаем числовое значение атакуемой фигуры (возможно элемента пирамиды)
          (for P no-check-attacked-by    ; Проверяем все атакующие фигуры (полученная клетка, виртуально, содержит только одну (атакующую) фигуру)
               save-position             ; Сохраняем текущую позицию
               P                         ; Позиционируемся на клетку
               (while M (<= -size)
                   (let Y (get v (copy M 1)))
                   (if (eq? X Y))        ; Если нашлась атакующая фигура с равным значением
                       restore-position  ; Отменяет неявный restore в конце итерации цикла
                       (capture N 1)     ; Удаляем атакуемую фигуру (возможно из пирамиды)
                   ) 
               )
          )
     )
)

(def check-eruption
     (check enemy?)
     (while N (<= -size)
          (let X (get v (copy N 1)))
          (for P (attacked-by long)      ; Проверка по направлению хода атакующей фигуры
               save-position             ; Сохраняем текущую позицию
               P                         ; Позиционируемся на клетку
               (while M (<= -size)
                    (let Y (get v (copy M 1)))
                    (if (or
                           (eq? X (* Y (+ distance 1)))
                           (eq? X (/ Y (+ distance 1)))
                        )
                        capture
                    )
               )
          )
     )
)

(def check-ambush
     (check enemy?)
     (while N (<= -size)
          (let X (get v (copy N 1)))
          (if  (eq? T
                    (sum no-check-attacked-by
                         (*   (variant -1 1)
                              (get v (copy (variant 1 .. size) 1)))
                         )
                    )
               )
               capture
          )
     )
)

(def check-captures
     (for P all-pieces
          P                              ; Устанвливаем позицию
          (check enemy?)                 ; Проверка враждебности по отношению к игроку, делавшему ход последним
          (check-siege)                  ; Блокирована с четырёх сторон
          (check-equality)               ; Может быть взята фигурой с равным номиналом
          (check-eruption)               ; Проверка произведения
          (check-ambush)                 ; Проверка суммы или разности
     )
)

(def (move-orthogonal X)
     X
     (check empty?)
     save-all
     X
     (check empty?)
     add
     end-move
     restore-all
     save-all
     (to-left X)
     (check empty?)
     add
     end-move
     restore-all
     (to-right X)
     (check empty?)
     add
     end-move
)

(def move-triangle-all
     (for X orthogonal-dirs
          save-all
          (move-orthogonal X)
     )
)

(def move-square-all
     (for X orthogonal-dirs
          save-all
          X
          (check empty?)
          (move-orthogonal X)
     )
)

(def (move-circle X)
     X
     (check empty?)
     add
     end-move
)

(def move-circle-all
     (for X diagonal-dirs
          save-all
          (move-circle X)
     )
)

(def move-all                            ; Дублирующие сгенерированные ходы отсекать на уровне ядра
     (while N (<= -size)
           (let Piece (copy N 1))        ; Получаем одну фигуру снизу верхней стопки из N фигур
           save-all
           lock                          ; Снимаем всю стопку
           (if (eq? Piece Circle)
               (move-circle-all)
           )
           (if (eq? Piece Triangle)
               (move-triangle-all)
           )
           (if (eq? Piece Square)
               (move-square-all)
           )
     )
)

(def (slide X)
     (loop
           X
           (if enemy?
               save-state
               add                       ; Постановка фигуры считается атакой даже без взятия
               end-move
           )
     )
)

(def slide-all
     (while N (<= -size)
           (let Piece (copy N 1))
           save-all
           lock
           (if (eq? Piece Circle)
               (for X diagonal-dirs
               save-all
               (slide X)
           )
           (if (or (eq? Piece Triangle) (eq? Piece Square))
               (for X orthogonal-dirs
               save-all
               (slide X)
           )
     )
)

(variant
   (title "Rithmomachy")

   (players Black White)
   (turn-order Black White)

   (board
        (grid (dims (name board)
                    "a/b/c/d/e/f/g/h"
                    "16/15/14/13/12/11/10/9/8/7/6/5/4/3/2/1")
              (dir n    0 -1)
              (dir s    0  1)
              (dir e    1  0)
              (dir w   -1  0)
              (dir nw  -1 -1)
              (dir ne   1 -1)
              (dir sw  -1  1)
              (dir se   1  1)
              (dir to-left  (n nw) (s se) (w sw) (e ne))
              (dir to-right (n ne) (s sw) (w nw) (e se))
        )
   )
   (piece Circle
        (constant v)                     ; Не проинициализированная константа
   )
   (piece Triagle
        (constant v)
   )
   (piece Square
        (constant v)
   )
   (setup
      (White
         (Square (v 15) a4 (v 25) a3 g4 (v 36) g4 (v 45) b4 (v 81) b3 (v 153) h4 (v 169) g3 (v 289) h3)
         (Triagle (v 6) b5 (v 9) a5 g4 (v 16) g4 (v 20) d4 (v 25) c4 (v 42) e4 (v 49) f4 (v 72) g5 (v 81) h5)
         (Circle (v 1) g4 (v 2) c6 (v 4) d6 c5 g4 (v 6) e6 (v 8) f6 (v 16) d5 (v 36) e5 (v 64) f5)
      )
      (Black
         (Square (v 28) h13 (v 49) h14 a13 (v 64) a13 (v 66) g13 (v 120) b13 (v 121) g14 (v 225) b14 (v 361) a14)
         (Triagle (v12) g12 (v 16) h12 (v25) a13 (v 30) e13 (v 36) f13 a13 (v 56) d13 (v 64) c13 (v 90) b12 (v 100) a12)
         (Circle (v 1) a13 (v 3) f11 (v 5) e11 (v 7) d11 (v 9) f12 c11 (v 25) e12 (v 49) d12 (v 81) c12)
      )
   )
   (move-priorities (normal))            ; Для всех игроков разрешён только обычных ход (режимы long и short используется для рассчета взятий)
   (moves 
        (move-type normal)
        move-all
        (move-type long)
        slide-all
   )
   (goals
        ((loss-condition (White Black)) (< (sum all-pices) 14))
        ((loss-condition (White)) (< (sum all-pices (get v)) 328))
        ((loss-condition (Black)) (< (sum all-pices (get v)) 429))
        (turn-condition check-captures)
   )
)
